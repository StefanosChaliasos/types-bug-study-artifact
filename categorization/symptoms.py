class Symptom():
    """
    This is the base class for symptoms.

    A symptom indicates how a developer understands that something is going
    wrong in the compiler.

    Overall, the symptom categories are (you can find more details about each
    category in the documentation of the corresponding classes):

      * Runtime
      * Unexpected compile-time error
      * Internal compiler error
      * Misleading report
      * Compilation performance
    """

    name = ""

    def __repr__(self):
        return self.name

    def __str__(self):
        return self.__repr__()


class RuntimeSymptom():
    """
    This is the base class for representing a symptom that manifests itself
    during the execution of the program (e.g., the program crashes with an
    unexpected runtime exception, produces an incorrect result).
    """
    name = ""

    def __repr__(self):
        return self.name

    def __str__(self):
        return self.__repr__()


class VerifyError(RuntimeSymptom):
    """
    The execution of the compiled program yields an unexpected
    `VerifyError` exception.

    The generated bytecode is not correct.
    """

    name = "VerifyError"


class MissingMethodException(RuntimeSymptom):
    """
    The execution of the compiled program yields an unexpected
    `MissingMethod` exception.

    The generated bytecode is not correct.
    """

    name = "MissingMethodException"


class AbstractMethodError(RuntimeSymptom):
    """
    The execution of the compiled program yields an unexpected
    `AbstractMethodError` exception.

    JVM couldn't find an implementation for a callee method.
    """

    name = "AbstractMethodError"


class NullPointerException(RuntimeSymptom):
    """
    The execution of the compiled program yields an unexpected
    `NullPointerException` exception.

    The program tried to access a field or a method of `null` value.
    """

    name = "NullPointerException"


class ClassCastException(RuntimeSymptom):
    """
    The execution of the compiled program yields an unexpected
    `ClassCastException` exception.

    There was an unexpected type mismatch at runtime.
    """

    name = "ClastCastException"


class IllegalAccessError(RuntimeSymptom):
    """
    The execution of the compiled program yields an unexpected
    `IllegalAccessError` exception.

    The program tried to access a field that didn't exist.
    """

    name = "IllegalAccessError"


class AmbiguousMethodError(RuntimeSymptom):
    """
    The execution of the compiled program yields an unexpected
    `AmbiguousMethodError` exception.

    JVM was unable to resolve the callee method due to ambiguoutity.
    """

    name = "AmbiguousMethodError"


class WrongResult(RuntimeSymptom):
    """
    The compiled program didn't generate any exception, but it yielded an
    incorrect result (e.g., a wrong method was called).
    """

    name = "Wrong result"


class CaseNotFound(RuntimeSymptom):
    """
    """

    name = "CaseNotFound"


class Runtime(Symptom):
    """
    The developer observes an unexpected behaviour during the execution
    of the program produced by the compiler.
    Examples of such unexpected behaviour are: (1) when the program crashes
    with an unexpected exception, or (2) when the program produces
    an incorrect result.

    Example:
      A buggy compiler successfully compiles (although, it shouldn't) an
      incorrect Java file (i.e., the Java file contains type errors),
      and produces the corresponding JAR file. During the execution of the
      generated JAR, the developer gets a `VerifyError` exception.
    """

    name = "Unexpected Runtime Behavior"

    def __init__(self, failure=None):
        self.failure = failure

    def __repr__(self):
        if self.failure:
            return self.name + " (" + str(self.failure) + ")"
        return self.name

    def __str__(self):
        return self.__repr__()


class CompileTimeError(Symptom):
    """
    The developer notices that something is going wrong in the compiler,
    because the compiler mistakenly rejects the input program, and produces
    a false report. Note this symptom happens during the compilation of the
    program, and NOT during its execution.

    Example:
       A buggy compiler does not compile (although it should) a correct
       Java program, and produces the following erroneous report:

       "
       error: type mismatch: inferred type is Any but String was expected
       "

    """

    name = "Unexpected Compile-Time Error"


class InternalCompilerError(Symptom):
    """
    The compiler crashes with an internal compiler error. In other words,
    it fails to translate the input program into the target language, or
    generate a compile-time report.

    Example:
       A buggy compiler crashes with a NullPointerException during compilation.
    """

    name = "Internal Compiler Error"


class MisleadingReport(Symptom):
    """
    The developer notices that something is going wrong in the compiler,
    because he receives a misleading or erroneous report or warning.

    Example:
       A buggy compiler correctly rejects the input program, but instead of
       producing the following message:

       "error: type mismatch: inferred type is Any but String was expected",

       it produces:

       "error: Unitialized variable 'x'"

    """

    name = "Misleading Report"


class CompilationPerformance(Symptom):
    """
    The developer notices that something is going wrong in the compiler,
    because there is a significant performance degradation in the compilation
    of the input program.

    Example:
        The compiler took 5 minutes to compile a program consisting of 10 lines
        of code.
    """

    name = "Compilation Performance Issue"
