The current implementation of the type checker allows to use methods of an object without the need of an explicit cast if it is wrapped in a proper {{instanceof}} check:

{code}
class A {
   void foo() {}
}
def o
...
if (o instanceof A) {
   o.foo()
}
{code}

But it doesn't work if the object is used as an argument:

{code}
class A {}
void m(A a) { ... }
def o
...
if (o instanceof A) {
   m(o) // requires m((A) o) which should not be necessary
}
{code}
