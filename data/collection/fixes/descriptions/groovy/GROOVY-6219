The following code fails compilation (which is what we want):

{code}
@TypeChecked
void printMessage(Closure<String> messageProvider) {
    println "Received message : ${messageProvider()}"
}
@TypeChecked
void testMessage() {
    def returnsString = { 'Hello, Groovy!' }
    def returnsInt = { int x, int y -> x+y }
    printMessage(returnsString)			
    printMessage(returnsInt)			
}
{code}

However if we do:

{code}
@TypeChecked
void printMessage(Closure<String> messageProvider) {
    println "Received message : ${messageProvider()}"
}
@TypeChecked
void testMessage() {
    printMessage { 'Hello, Groovy!' }
    printMessage { int x, int y -> x+y }
}
{code}

It fails recognizing that the second call to {{printMessage}} is invalid.