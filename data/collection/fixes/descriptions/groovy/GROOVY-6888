Consider the following:

{code}
@TypeChecked
class A {
  @Bindable
  String foo
  
  static void main(String[] args) {
	  A a = new A()
	  a.foo = 'old'
	  a.addPropertyChangeListener('foo') { event ->
		  println 'foo changed: ' + event.oldValue + ' -> ' + event.newValue
	  }
	  a.foo = 'new'
  }
}
{code}

The Groovy compiler fails:
bq. [Static type checking] - No such property: oldValue for class: java.lang.Object

This is unexpected, because if I leave the {{event}} naming of the closure input parameter and use {{it.oldValue}}/{{it.newValue}} the static type checking succeeds (as it should).