## Starting langtools
Compiling 2 files for BUILD_TOOLS
dev/langtools/src/share/classes/com/sun/tools/javac/comp/Annotate.java:511: error: incompatible types
                    new Pair<>(containerValueSymbol,
                    ^
  required: Pair<MethodSymbol,Attribute>
  found:    Pair<MethodSymbol,Array>
dev/langtools/src/share/classes/com/sun/tools/javac/comp/Check.java:2604: error: no suitable method found for checkClassBounds(DiagnosticPosition,HashMap<Object,Object>,Type)
        checkClassBounds(pos, new HashMap<>(), type);
        ^
    method Check.checkClassBounds(DiagnosticPosition,Map<TypeSymbol,Type>,Type) is not applicable
      (actual argument HashMap<Object,Object> cannot be converted to Map<TypeSymbol,Type> by method invocation conversion)
    method Check.checkClassBounds(DiagnosticPosition,Type) is not applicable
      (actual and formal argument lists differ in length)
dev/langtools/src/share/classes/com/sun/tools/javac/comp/Infer.java:2016: error: no suitable method found for solve(GraphStrategy,HashMap<Object,Object>,Warner)
            solve(ss, new HashMap<>(), warn);
            ^
    method Infer.InferenceContext.solve(List<Type>,Warner) is not applicable
      (actual and formal argument lists differ in length)
    method Infer.InferenceContext.solve(Warner) is not applicable
      (actual and formal argument lists differ in length)
    method Infer.InferenceContext.solve(GraphStrategy,Map<Type,Set<Type>>,Warner) is not applicable
      (actual argument HashMap<Object,Object> cannot be converted to Map<Type,Set<Type>> by method invocation conversion)
    method Infer.InferenceContext.solve(GraphStrategy,Warner) is not applicable
      (actual and formal argument lists differ in length)
dev/langtools/src/share/classes/com/sun/tools/javac/comp/Flow.java:375: error: method resolveJump in class BaseAnalyzer<P> cannot be applied to given types;
            return resolveJump(tree, new ListBuffer<>(), JumpKind.CONTINUE);
                   ^
  required: JCTree,ListBuffer<P>,JumpKind
  found: JCTree,ListBuffer<Object>,JumpKind
  reason: actual argument ListBuffer<Object> cannot be converted to ListBuffer<P> by method invocation conversion
  where P is a type-variable:
    P extends PendingExit declared in class BaseAnalyzer
dev/langtools/src/share/classes/com/sun/tools/javac/processing/JavacFiler.java:362: error: incompatible types
        fileObjectHistory = synchronizedSet(new LinkedHashSet<>());
                                           ^
  required: Set<FileObject>
  found:    Set<Object>
dev/langtools/src/share/classes/com/sun/tools/javac/processing/JavacFiler.java:363: error: incompatible types
        generatedSourceNames = synchronizedSet(new LinkedHashSet<>());
                                              ^
  required: Set<String>
  found:    Set<Object>
dev/langtools/src/share/classes/com/sun/tools/javac/processing/JavacFiler.java:364: error: incompatible types
        generatedSourceFileObjects = synchronizedSet(new LinkedHashSet<>());
                                                    ^
  required: Set<JavaFileObject>
  found:    Set<Object>
dev/langtools/src/share/classes/com/sun/tools/javac/processing/JavacFiler.java:366: error: incompatible types
        generatedClasses = synchronizedMap(new LinkedHashMap<>());
                                          ^
  required: Map<String,JavaFileObject>
  found:    Map<Object,Object>
dev/langtools/src/share/classes/com/sun/tools/javac/processing/JavacFiler.java:368: error: incompatible types
        openTypeNames  = synchronizedSet(new LinkedHashSet<>());
                                        ^
  required: Set<String>
  found:    Set<Object>
dev/langtools/src/share/classes/com/sun/tools/javac/main/JavaCompiler.java:581: error: incompatible types
        return shouldStop(cs) ? new ListBuffer<>() : queue;
                              ^
  required: Queue<T>
  found:    Queue<CAP#1>
  where T is a type-variable:
    T extends Object declared in method <T>stopIfError(CompileState,Queue<T>)
  where CAP#1 is a fresh type-variable:
    CAP#1 extend