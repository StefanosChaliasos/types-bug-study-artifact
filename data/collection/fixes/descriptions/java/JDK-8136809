FULL PRODUCT VERSION :
java version "1.9.0-ea"
Java(TM) SE Runtime Environment (build 1.9.0-ea-b80)
Java HotSpot(TM) 64-Bit Server VM (build 1.9.0-ea-b80, mixed mode)

Also fails with older ea build:

java version "1.9.0-ea"
Java(TM) SE Runtime Environment (build 1.9.0-ea-b57)
Java HotSpot(TM) 64-Bit Server VM (build 1.9.0-ea-b57, mixed mode)



ADDITIONAL OS VERSION INFORMATION :
Microsoft Windows [Version 6.1.7601]

A DESCRIPTION OF THE PROBLEM :
Compilation fails with assertion error

REGRESSION.  Last worked in version 8u60

ADDITIONAL REGRESSION INFORMATION: 
Works fine on the following Java versions:

java version "1.8.0_60"
Java(TM) SE Runtime Environment (build 1.8.0_60-b27)
Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)

java version "1.8.0_40"
Java(TM) SE Runtime Environment (build 1.8.0_40-b26)
Java HotSpot(TM) 64-Bit Server VM (build 25.40-b25, mixed mode)

java version "1.8.0_25"
Java(TM) SE Runtime Environment (build 1.8.0_25-b18)
Java HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile the supplied CollectorTest.java file

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Successful compilation
ACTUAL -
javac fails with assertion error

ERROR MESSAGES/STACK TRACES THAT OCCUR :
An exception has occurred in the compiler (1.9.0-ea). Please file a bug at the Java Bug Database (http://bugreport.java.com/bugreport/) after checking the database for duplicates. Include your program and the following diagnostic in your report.  Thank you.
java.lang.AssertionError: Unexpected kind: OTHER
	at com.sun.tools.javac.code.Kinds.kindName(Kinds.java:302)
	at com.sun.tools.javac.comp.Resolve$AmbiguityError.getDiagnostic(Resolve.java:3945)
	at com.sun.tools.javac.comp.Attr.visitReference(Attr.java:2805)
	at com.sun.tools.javac.tree.JCTree$JCMemberReference.accept(JCTree.java:2149)
	at com.sun.tools.javac.comp.Attr.attribTree(Attr.java:591)
	at com.sun.tools.javac.comp.DeferredAttr.attribSpeculative(DeferredAttr.java:409)
	at com.sun.tools.javac.comp.DeferredAttr.attribSpeculative(DeferredAttr.java:398)
	at com.sun.tools.javac.comp.DeferredAttr$4.complete(DeferredAttr.java:322)
	at com.sun.tools.javac.comp.DeferredAttr$DeferredType.check(DeferredAttr.java:288)
	at com.sun.tools.javac.comp.DeferredAttr$DeferredType.check(DeferredAttr.java:275)
	at com.sun.tools.javac.comp.Resolve$MethodResultInfo.check(Resolve.java:1002)
	at com.sun.tools.javac.comp.Resolve$4.checkArg(Resolve.java:825)
	at com.sun.tools.javac.comp.Resolve$AbstractMethodCheck.argumentsAcceptable(Resolve.java:730)
	at com.sun.tools.javac.comp.Resolve$4.argumentsAcceptable(Resolve.java:834)
	at com.sun.tools.javac.comp.Infer.instantiateMethod(Infer.java:180)
	at com.sun.tools.javac.comp.Resolve.rawInstantiate(Resolve.java:562)
	at com.sun.tools.javac.comp.Resolve.selectBest(Resolve.java:1439)
	at com.sun.tools.javac.comp.Resolve.findMethodInScope(Resolve.java:1620)
	at com.sun.tools.javac.comp.Resolve.findMethod(Resolve.java:1689)
	at com.sun.tools.javac.comp.Resolve.findMethod(Resolve.java:1663)
	at com.sun.tools.javac.comp.Resolve$9.doLookup(Resolve.java:2363)
	at com.sun.tools.javac.comp.Resolve$BasicLookupHelper.lookup(Resolve.java:2971)
	at com.sun.tools.javac.comp.Resolve.lookupMethod(Resolve.java:3222)
	at com.sun.tools.javac.comp.Resolve.resolveQualifiedMethod(Resolve.java:2360)
	at com.sun.tools.javac.comp.Resolve.resolveQualifiedMethod(Resolve.java:2354)
	at com.sun.tools.javac.comp.Attr.selectSym(Attr.java:3432)
	at com.sun.tools.javac.comp.Attr.visitSelect(Attr.java:3310)
	at com.sun.tools.javac.tree.JCTree$JCFieldAccess.accept(JCTree.java:2069)
	at com.sun.tools.javac.comp.Attr.attribTree(Attr.java:591)
	at com.sun.tools.javac.comp.Attr.visitApply(Attr.java:1838)
	at com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1598)
	at com.sun.tools.javac.comp.Attr.attribTree(Attr.java:591)
	at com.sun.tools.javac.comp.Attr.attribExpr(Attr.java:630)
	at com.sun.tools.javac.comp.Attr.visitVarDef(Attr.java:1087)
	at com.sun.tools.javac.tree.JCTree$JCVariableDecl.accept(JCTree.java:920)
	at com.sun.tools.javac.comp.Attr.attribTree(Attr.java:591)
	at com.sun.tools.javac.comp.Attr.attribStat(Attr.java:660)
	at com.sun.tools.javac.comp.Attr.attribClassBody(Attr.java:4356)
	at com.sun.tools.javac.comp.Attr.attribClass(Attr.java:4263)
	at com.sun.tools.javac.comp.Attr.attribClass(Attr.java:4192)
	at com.sun.tools.javac.comp.Attr.attrib(Attr.java:4167)
	at com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1228)
	at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:871)
	at com.sun.tools.javac.main.Main.compile(Main.java:254)
	at com.sun.tools.javac.main.Main.compile(Main.java:142)
	at com.sun.tools.javac.Main.compile(Main.java:56)
	at com.sun.tools.javac.Main.main(Main.java:42)


REPRODUCIBILITY :
This bug can be reproduced always.

---------- BEGIN SOURCE ----------
// CollectorTest.java
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.math.BigInteger;

public class CollectorTest {
  Collector<Long, ?, BigInteger> summing = 
    Collectors.reducing(BigInteger.ZERO, BigInteger::valueOf, BigInteger::add);
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Replace BigInteger::add method reference with lambda expression:

import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.math.BigInteger;

public class CollectorTest {
  Collector<Long, ?, BigInteger> summing = 
    Collectors.reducing(BigInteger.ZERO, BigInteger::valueOf, (BigInteger b1, BigInteger b2) -> b1.add(b2));
}

