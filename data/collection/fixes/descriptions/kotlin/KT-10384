In the following code

{code lang=Kotlin}
val list: List<Int> = setOf(1, 2) as Collection<Int> + setOf(3, 4)
{code}

`as` is marked as unnecessary. However, the `as` here influences which plus function is called. Without it, we call Set<>.plus(Iterable) and get a set (and type mismatch in addition), but with it, we call Collection<>.plus(Iterable) and get a list without any type mismatch.