Consider this code:

```
class A<T> {
    inner class B(t: T)

    class C(val b: B)
}
```

Here it is obvious that `class C` should not use `B`, and the compiler complains about it:

>`class C(val b: B)`
>`               ^ Type argument expected`

Then if I change the code adding a type argument:

```
class A<T> {
    inner class B(t: T)

    class C(val b: B<Int>)
}
```

the compiler says contradictory

>`class C(val b: B<Int>)`
>`               ^ No type arguments expected`

It gets resolved by writing `A<Int>.B`, but still the error is rather confusing.