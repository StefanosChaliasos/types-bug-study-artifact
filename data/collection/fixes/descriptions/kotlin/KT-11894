```
// A.java
public class A {
    public static <T> T id(T t) {
        return t;
    }

    @NotNull
    static List<String> bar() {
        return Collections.emptyList();
    }
}

// k.kt
fun test() {
    val id = A.id(A.bar()) // wrong type: `(Mutable)List<String!>` instead of `(Mutable)List<String!>!`

    val id1 = A.id(4) // correct type: Int!
}
```

see LazyJavaTypeResolver.FlexibleJavaClassifierTypeCapabilities.Impl.substitutionResult