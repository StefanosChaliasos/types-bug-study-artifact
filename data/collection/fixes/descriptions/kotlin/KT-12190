```
   fun x(list: List<Any>) {
        // calling TreeMap<K, V> parameterless ctor and inferring K and V from the expected type
        val ok: Map<String, Any> = list.associateByTo(TreeMap()) { it.toString() }

        // calling TreeMap<K, V> ctor with Comparator<? super K> parameter
        // Type inference failed. Expected type mismatch: inferred type is MutableMap<in String, in Any> but Map<String, Any> was expected. 
        // Type inference failed: Not enough information to infer parameter V in constructor TreeMap<K : Any!, V : Any!>(comparator: Comparator<in K!>!)
        // Please specify it explicitly.  
        val fail: Map<String, Any> = list.associateByTo(TreeMap(String.CASE_INSENSITIVE_ORDER)) { it.toString() }

   }
```