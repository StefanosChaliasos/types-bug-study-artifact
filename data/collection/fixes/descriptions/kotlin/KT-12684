``` kotlin
inline fun <T, reified S> foo(x : T?, y : T) : T {
    if(x is S) return x // Smart cast to T
    return y
}

fun main(args: Array<String>) {
    val s : String = foo<String, Any?>(null, "");
    println(s.toUpperCase()) // kotlin.TypeCastException: null cannot be cast to non-null type java.lang.String
}
```

The smart cast to `T` should not be allowed because `S` can be a nullable type, so the compiler cannot infer that `(T? & S) <: T`.