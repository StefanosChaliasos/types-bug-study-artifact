Here is a snippet showcasing the issue:
{code:lang=kotlin}
val obj1 = run { "test" as Any }
val list = mutableListOf(obj1)
list.add(42)
{code}

 *as Any* triggers a compiler warning but removing it causes a compile time error.

I know that it is possible to explicitly specify the generic type:
{code:lang=kotlin}
val obj1 = run<Any> { "test" }
val list = mutableListOf(obj1)
list.add(42)
{code}

I am facing this issue while using RxJava
{code:lang=kotlin}
observable.map { LoginView.Status.Success(it) as LoginView.Status }
{code}

Java interop causes this code to be more verbose than needed, I prefer the code from above but it gives out a warning.
{code:lang=kotlin}
observable.map<LoginView.Status> (Func1 { account -> LoginView.Status.Success(account) })
{code}
 