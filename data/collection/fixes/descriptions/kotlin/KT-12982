Code sample:

{code}
import kotlin.reflect.KMutableProperty1
​
class Foo {
    protected var x = 0
​
    fun baz(p:KMutableProperty1<Foo, Int>) = ""
    fun print() = baz(Foo::x) //Error:(8, 23) Kotlin: Type mismatch: inferred type is KProperty1<Foo, Int> but KMutableProperty1<Foo, Int> was expected
}
​
class Bar {
    var x = 0
    fun baz(p: KMutableProperty1<Bar, Int>) = ""
    fun print() = baz(Bar::x)
}
{code}

There is no consistency in inferring KProperty1 in case of "protected" modifier. Readonly property reference could be misused as well as read-write if it leaks outside the class.