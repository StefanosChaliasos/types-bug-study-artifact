Consider Kotlin code:
{code}open class BaseKotlin{
    open fun baseFunction() = "hello"
}

class ChildWithNestedDefault : BaseKotlin(){
    // Expected here similar error about conflicting overloads or ambiguity
    class baseFunction

    // Error:(11, 5) Kotlin: Conflicting overloads:
    // public open fun baseFunction(): String defined in typealiases.redeclarations.ChildWithNestedDefault,
    // public constructor baseFunction() defined in typealiases.redeclarations.ChildWithNestedDefault.baseFunction
    override fun baseFunction(): String {
        return super.baseFunction()
    }
}
{code}
Note: if nested class and the same named function is located in one class there are corresponding errors:
{code}class B{
    class Nested // Error:(14, 11) Kotlin: 'public constructor Nested()' conflicts with another declaration in class 'B'
    fun Nested(){} //Error:(15, 5) Kotlin: 'public final fun Nested(): Unit' conflicts with another declaration in class 'Nested'
}{code}