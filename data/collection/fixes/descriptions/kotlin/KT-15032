Take an injected markdown fragment like:

```
fun main(args: Array<String>) {
<caret>
}
```

and enter some spaces. Stack trace:

```
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasnt found for declaration FUN
File name: test.md Physical: true
<caret>fun main(args: Array<String>) {
  
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.resolve.lazy.LazyDeclarationResolver.resolveToDescriptor(LazyDeclarationResolver.java:247)
	at org.jetbrains.kotlin.resolve.lazy.LazyDeclarationResolver.resolveToDescriptor(LazyDeclarationResolver.java:113)
	at org.jetbrains.kotlin.resolve.lazy.ResolveSession.resolveToDescriptor(ResolveSession.java:326)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:71)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor$default(resolutionApi.kt:41)
	at org.jetbrains.kotlin.idea.highlighter.KotlinRunLineMarkerContributor$getInfo$detector$1.invoke(KotlinRunLineMarkerContributor.kt:37)
	at org.jetbrains.kotlin.idea.highlighter.KotlinRunLineMarkerContributor$getInfo$detector$1.invoke(KotlinRunLineMarkerContributor.kt:29)
	at org.jetbrains.kotlin.idea.MainFunctionDetector.isMain(MainFunctionDetector.kt:68)
	at org.jetbrains.kotlin.idea.highlighter.KotlinRunLineMarkerContributor.getInfo(KotlinRunLineMarkerContributor.kt:40)
	at com.intellij.execution.lineMarker.RunLineMarkerProvider.getLineMarkerInfo(RunLineMarkerProvider.java:50)

```