The following example tells me that this `when` is not exhaustive. When I remove the type parameter from `InnerSealed` it works correctly.

{code lang=kotlin}
sealed class SealedTest {
    class First() : SealedTest()

    sealed class InnerSealed<T>() : SealedTest() {
        class StringList() : InnerSealed<String>()
        class IntList() : InnerSealed<Int>()
    }
}

fun choose(type: SealedTest) =
    when (type) {
        is First -> {
        }
        is InnerSealed<*> -> when (type) {
            is StringList -> {
            }
            is IntList -> {
            }
        }
    }
{code}

