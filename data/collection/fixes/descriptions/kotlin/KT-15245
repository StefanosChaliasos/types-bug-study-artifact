In the example below, the constructor is deprecated with level WARNING, but the class is deprecated with ERROR. However, the way it works at the moment is for the usage of the constructor, we find its deprecation and do not attempt to look for deprecation on associated declaration (in this case, the containing class). I think this is wrong at least in the case the associated declaration is deprecated with a higher level.

```
@Deprecated("error", level = DeprecationLevel.ERROR)
class Foo @Deprecated("warning", level = DeprecationLevel.WARNING) constructor()

fun test1() = Foo()  // <-- only a warning

fun test2(): Foo = Foo()  // <-- error on type usage, still just a warning on constructor call
```
