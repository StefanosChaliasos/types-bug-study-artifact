Here's the code:

```
inline fun <reified T> getInstance(): T = TODO()

class Factory<T>
fun <T> factory(f: () -> T): Factory<T> = TODO()

fun main(args: Array<String>) {
    val v: Factory<String> = factory { getInstance() }
//                                     ^^^^^^^^^^^
//                                     Type inference failed:
//                                     Not enough information to infer parameter T
}
```

It is my understanding that Kotlin should infer `instance`'s `T` to be `String`:

- `v` is of type `Factory<String>`
- Therefore, the generic argument of the `factory` function is `String`, *which is already correctly infered*.
- Therefore, the lambda parameter of the `factory` function must return a `String`, *which is already correctly infered*.
- Therefore, the generic parameter of the `instance` function, which yields the return value of the lambda, is `String`, *which is NOT infered*.