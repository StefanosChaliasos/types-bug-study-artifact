I figured we'd be able to implement plus() as returning a new collection with the element(s) added and plusAssign() adding to the current collection, but trying this causes a compile error. Should this be possible? Maybe plus always returns a new collection and we don't override plusAssign?

To reproduce uncomment this TODO
https://github.com/JetBrains/kotlin/blob/28b079219104cbc35d6304bb6033c2a6061a48f5/libraries/stdlib/test/CollectionTest.kt#L263

and the use of list += value causes the compiler to think both plus() and plusAssign() are suitable methods, so there's an ambiguity

The compile error is:
{code}
ERROR: /workspace/java/kotlin/libraries/stdlib/test/CollectionTest.kt: (270, 14) Assignment operators ambiguity: 
final fun <T : jet.Any?, C : java.util.Collection<jet.String>>java.util.ArrayList<jet.String>.plusAssign(val element : jet.String) : java.util.ArrayList<jet.String> defined in <java_root>.<java_root>.kotlin
final fun <T : jet.Any?>java.util.Collection<jet.String>.plus(val element : jet.String) : java.util.List<in jet.String> defined in <java_root>.<java_root>.kotlin
{code}
