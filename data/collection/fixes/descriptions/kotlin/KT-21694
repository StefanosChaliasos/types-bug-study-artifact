```
import javafx.collections.FXCollections
import javafx.collections.ObservableList

interface Searchable<T>

class Test<T>(val options: ObservableList<Searchable<T>>)

fun main(args: Array<String>) {
    Test(FXCollections.observableArrayList(object : Searchable<String> {}))
}
```
This tells me: Type inference failed: constructor Test<T>(options: ObservableList<Searchable<T>>)
cannot be applied to (ObservableList<Searchable<String>!>!)

When I state the type arguments explicitly, Intellij tells me to remove explicit type arguments, which of course creates the above error again:

```
fun main(args: Array<String>) {
    Test<String>(FXCollections.observableArrayList(object : Searchable<String>))
}
```
Interestingly, when I define the class Test like this, everything works without any issues:
```
class Test<T>(val options: List<Searchable<T>>)
```

(I've reduced it to an SSCCE, of course in my real code I actually use the Type Parameters, but that would convolute the request unneccessarily)