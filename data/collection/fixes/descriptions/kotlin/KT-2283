{code}
trait Foo<A>

fun <A, B> Foo<A>.map(f: (A) -> B): Foo<B> = object : Foo<B> {}


fun foo() {
    val l: Foo<String> = object : Foo<String> {}
    val m: Foo<String> = l.map { ppp -> 1 }
}
{code}

Code above is incorrect: type of "m" should be Foo<Int>. However, IDE shows two errors:

* NONE_APPLICABLE on "map" invocation
* CANNOT_INFER_PARAMETER_TYPE on "ppp"

Error is reported better when "foo" is a member function, not extension.