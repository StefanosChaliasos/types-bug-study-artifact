{code}
abstract class Consumer<in T> {
    fun consume(t: T): Unit                    //ok
    fun produce(): T                           //should be error

    fun consumeConsumer(c: Consumer<T>): Unit  //should be error
    fun produceConsumer(): Consumer<T>         //ok

    fun consumeProducer(p: Producer<T>): Unit  //ok
    fun produceProducer(): Producer<T>         //should be error

    fun consumeUsual(u: Usual<T>): Unit        //should be error
    fun produceUsual(): Usual<T>               //should be error
}

abstract class Producer<out T> {
    fun consume(t: T): Unit                    //should be error
    fun produce(): T                           //ok

    fun consumeConsumer(c: Consumer<T>): Unit  //ok
    fun produceConsumer(): Consumer<T>         //should be error

    fun consumeProducer(p: Producer<T>): Unit  //should be error
    fun produceProducer(): Producer<T>         //ok

    fun consumeUsual(u: Usual<T>): Unit        //should be error
    fun produceUsual(): Usual<T>               //should be error
}

abstract class Usual<T> {
    fun consume(t: T): Unit                    //ok
    fun produce(): T                           //ok

    fun consumeConsumer(c: Consumer<T>): Unit  //ok
    fun produceConsumer(): Consumer<T>         //ok

    fun consumeProducer(p: Producer<T>): Unit  //ok
    fun produceProducer(): Producer<T>         //ok

    fun consumeUsual(u: Usual<T>): Unit        //ok
    fun produceUsual(): Usual<T>               //ok
}
{code}