# Synopsis

Type of change:
- New diagnostics: errors

Motivation:
- The compiler accepts code that shouldn't compile

Impact:
- Some code that used to compile wonâ€™t compile anymore

Migration:
- All code locations affected by this change can be accurately detected statically
- Migration can be automated

# Summary

Annotation classes don't have JVM-constructors, unlike the usual classes. 
For example, secondary constructors (any members) are forbidden for Kotlin annotations.
Therefore mechanisms that are used to create additional constructors should be forbidden for annotations.

# Existing behavior

#### Code sample

The following code is currently allowed:

    annotation class A @JvmOverloads constructor(val x: Int = 1)

For a usual class `@JvmOverloads` will create additional constructors for Java interop. 
For annotation class, it's meaningless as they don't have JVM-constructors.

There is no footprint of `JvmOverloads` in the generated bytecode and Kotlin metadata, so `@JvmOverloads` doesn't affect generated bytecode and behavior of this code.

#### Affected version

This problem exists since Kotlin 1.0.

# Proposed behavior

Forbid using `@JvmOverloads` on constructors of annotation classes

# Impact of change

Since there is no effect on the generated bytecode, we believe that this case is quite rare.

# Migration

- Report a warning in 1.3.x
  - Report error in progressive mode
Corrected code will work and compile fine in a regular (non-progressive) mode
- Turn the warning into an error in 1.4

It's also possible to add an IDE intention that will remove `JvmOverloads` from constructors of annotation classes, it will ease the migration