`CallsInPlace` inherited from `SimpleEffect` in stdlib, `SimpleEffect` has `implies` infix function, but `CallsInPlace` does't work with `implies`.
It allows you to create valid but senseless contracts.
Example (callsInPlace doesn't work):
```
fun case_1_1(value1: Int?, block: () -> Unit) {
    contract {
        callsInPlace(block, InvocationKind.EXACTLY_ONCE) implies (value1 != null)
    }
    if (value1 != null) block()
}

fun case_7(value1: Int?) {
    val t: Int

    case_9_2(value1) {
        t = 10
        println(value1.inv())
    }

    println(t)
}
```

Is it worth it to solve this problem?