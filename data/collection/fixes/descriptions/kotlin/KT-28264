Consider the following code:

```
fun <A> test1(list: List<A>) {
    list.map { it?.javaClass }
}

fun <A> test2(list: List<A>) {
    list.map { it : Any? -> it?.javaClass }
}
```

The second method compiles and the first doesn't although both methods do exactly the same.

The error message is: 

> Type parameter bound for T in val <T : Any> T.javaClass: Class<T> is not satisfied: inferred type A is not a subtype of Any