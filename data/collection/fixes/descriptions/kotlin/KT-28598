In the old inference type is inferred correctly.

The code is:
```
fun case_1(a: MutableList<out MutableList<MutableList<MutableList<MutableList<MutableList<Int?>?>?>?>?>?>?) {
    if (a != null) {
        val b = a[0]
        if (b != null) {
            val c = b[0]
            if (c != null) {
                val d = c[0]
                if (d != null) {
                    val e = d[0]
                    if (e != null) {
                        val f = e[0]
                        if (f != null) {
                            val g = f[0]
                            if (g != null) {
                                g // inferred to Any, not to Int
                            }
                        }
                    }
                }
            }
        }
    }
}
```

Note that without `out` projection or with type less than one level it is work correctly:
```
fun case_1(a: MutableList<MutableList<MutableList<MutableList<MutableList<MutableList<Int?>?>?>?>?>?>?) {
    if (a != null) {
        val b = a[0]
        if (b != null) {
            val c = b[0]
            if (c != null) {
                val d = c[0]
                if (d != null) {
                    val e = d[0]
                    if (e != null) {
                        val f = e[0]
                        if (f != null) {
                            val g = f[0]
                            if (g != null) {
                                g // inferred to Int
                            }
                        }
                    }
                }
            }
        }
    }
}
```
```
fun case_1(a: MutableList<out MutableList<MutableList<MutableList<MutableList<Int?>?>?>?>?>?) {
    if (a != null) {
        val b = a[0]
        if (b != null) {
            val c = b[0]
            if (c != null) {
                val d = c[0]
                if (d != null) {
                    val e = d[0]
                    if (e != null) {
                        val f = e[0]
                        if (f != null) {
                            f // inferred to Int
                        }
                    }
                }
            }
        }
    }
}
```

Also note that with `List` and redundant `out` projection it's work not correctly, but without redundant `out` it's work.