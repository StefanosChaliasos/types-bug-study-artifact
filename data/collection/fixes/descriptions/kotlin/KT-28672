# Classification

- Type of change: 
  - Some valid language constructs change their meaning
  - Change in the standard library
    - Contract refinement
- Motivation types: 
    - The implementation does not abide by a published spec or documentation
- Impact types: 
    - By the contract, the old behavior is incorrect (thus a fix is needed)
- Detection and Migration modes: 
    - Migration can't be automated

# Background

Kotlin allows defining contracts for extension functions:

```kotlin
fun Any?.notNull(): Boolean {
    contract {
        returns(true) implies (this@notNull != null)
    }
    return this != null
}
```

For example, this contract means that if the return value is `true`, then the extension receiver is not null.
This information can be used for smartcasts:

```kotlin
val x: String? = null
if (x.notNull()) {
    x.length // x smartcasted to String
}
```

This feature is experimental, so in order to use contracts, one has to explicitly opt-in on them.
See the [documentation](https://kotlinlang.org/docs/reference/whatsnew13.html#contracts) and [KEEP](https://github.com/Kotlin/KEEP/blob/master/proposals/kotlin-contracts.md) about contracts for details.

While this feature is experimental, several stable methods of stdlib are marked with such contracts and therefore this issue is a subject of a breaking change.

# Existing behavior

Next, imagine we still have that function `notNull` with the same contract:

```kotlin
fun Any?.notNull(): Boolean {
    contract {
        returns(true) implies (this@notNull != null)
    }
    return this != null
}
```

There will be a problem when this function is called with an implicit receiver. Namely, there will be no smarcast:

```kotlin
val x: String? = null
with (x) {
    if (notNull()) {
        length // Error, no smartcast
    }
    if (this.notNull()) {
        length // Ok, smartcast
    }
}
```

It happens because of a bug in the implementation of contracts in the compiler, implicit receivers weren't supported in it at all. 

## Affected versions: when did the problem appear first? 

The problem exists since 1.3.0 (with the release of contracts).

# Proposed changes

The proposal is to support using information about contracts on implicit receivers.

# Impact

Contracts is an experimental feature but it's used for several methods from stdlib that can affect users' code.
Namely, the following extension functions have a similar contract as in the example above:
```kotlin
fun Array<*>?.isNullOrEmpty(): Boolean
fun <T> Collection<T>?.isNullOrEmpty(): Boolean
fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean
fun CharSequence?.isNullOrEmpty(): Boolean
fun CharSequence?.isNullOrBlank(): Boolean
```

As a result, some types can be refined in production code:
```kotlin
fun String?.foo() {
    if (!isNullOrBlank()) {
        this // this has type `String?`, after the fix it'll be String
    }
}
```

Resolve in user code with contracts may change:
```kotlin
fun String?.foo() {
    if (!isNullOrBlank()) {
        bar(this) // bar is resolved to (2), after the fix it'll be resolved to (1)
    }
}

fun bar(s: String) {} // (1)

@JvmName("barNullable")
fun bar(s: String?) {} // (2)
```

Still, usually, there are not-null assertions after similar checks like `!isNullOr...`:
```
fun String?.foo() {
    if (!isNullOrBlank()) {
        this!!.length
    }
}
```

Therefore, we believe the impact of this issue is quite small.

# Migration plan

- 1.4.0 Implement proposed changes
  - Compiler key `-XXLanguage:-ContractsOnCallsWithImplicitReceiver` can be used to preserve old behavior