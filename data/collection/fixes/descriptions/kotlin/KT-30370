```
inline fun <T> foo(f: () -> T): String {
    return (f() as? Inv<T>)?.result() ?: "Bad"
}

class Inv<T> {
    fun result(): String = "OK"
}

fun <K> create(): Inv<K> = Inv()

fun test(b: Boolean): String {
    return foo {
        if (!b) {
            return@foo create<String>()
        }

        if (b) {
            create()
        } else {
            null
        }
    }
}

fun box(): String {
    return test(true)
}
```

This code will fail with a runtime exception, while it should work fine.

The problem is that type variable for `if` expression was inferred to `Nothing?`: compiler completed call for `if` too early because it considered constraint `Nothing` (from null) good enough while it's not.