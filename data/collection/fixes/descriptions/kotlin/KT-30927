Consider the code:
```
fun case_1(z: Any?) {
    val y = z.run {
        when (this) {
            is String -> return@run this // type mismatch in the new inference (required String, found Any?)
            is Float -> ""
            else -> return@run ""
        }
    }
    // y is inferred to Any?
}
```
The problem is that `this` in the first branch of `when` is of type `Any?`, not `String` (from smartcast).
Because of this, the type `y` is inferred to `Any?` in the old inference and also "Type mismatch" is reported on `this` in the new inference.

Without labeled return it's OK:
```
fun case_1(z: Any?) {
    val y = z.run {
        when (this) {
            is String -> this
            is Float -> ""
            else -> return@run ""
        }
    }
    // y is inferred to String
}
```
With labeled return not on `this` it's also OK:
```
fun case_1(z: Any?) {
    val y = z.let {
        when (it) {
            is String -> return@let it
            is Float -> ""
            else -> return@let ""
        }
    }
    // y is inferred to String
}
```
I also added `new-inference` label, because when I migrate to the new inference, such code will turn red (will report type mismatch diagnostic).

**UPD**

There is also the following problem:
```
val z: Any? = 10
val y = z.run {
    this as Int
    this // error in NI: required Int, found Any?; just inferred to Any? in OI
}
```