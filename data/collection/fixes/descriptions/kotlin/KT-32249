Example (Kotlin 1.3.40):

```
import kotlin.properties.ReadOnlyProperty
import kotlin.reflect.KProperty

class Wrapper<T>(val name: String, val defaultValue: T)

private fun <T> wrapper(defaultValue: T) = object : ReadOnlyProperty<Any, Wrapper<T>> {
    override fun getValue(thisRef: Any, property: KProperty<*>) = Wrapper(property.name, defaultValue)
}

object Foo {
    val x by wrapper(true)
}
```

If the "Enable new type inference algoritm for IDE analysis" checkbox is on, this code gives a "Type mistmatch" error.
Making `wrapper()` function non-private, providing an explicit type for it (`ReadOnlyProperty<Any, DebuggerPreference<T>>`) or converting an anonymous object to an ordinary class declaration fixes the problem.