What steps will reproduce the issue?
1. Define an open Kotlin class with a type parameter, and an inner class with a an argument of the generic type
2. Subclass the outer class and the inner class with a concrete type

What is the expected result?

Valid code should not be flagged

What happens instead?

IDEA flags the parameter to the inner class as being required to match the generic type, not the concrete type

Sample code:

````
abstract class TestType<V: Any> {

    open inner class Inner(val item: V) {

    }
}

class Derived: TestType<Long>() {
    inner class DerivedInner(item: Long): Inner(item) {

    }
}
````