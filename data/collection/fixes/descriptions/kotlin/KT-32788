```
sealed class Test
class TestComparable(d: List<String>): Test(), List<String> by d
fun Test.eq(that: Test): Boolean {
    return this is TestComparable
        && that is TestComparable
        && sorted() == that.sorted()
}
```

During compilation, a smart cast in `<T: Comparable <T >> Iterable <T>` works. But the build fails due to an error:
`Type inference failed: fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> cannot be applied to receiver: Test  arguments: ()`

The problem is not reproduced if you explicitly specify `this`.

```
sealed class Test
class TestComparable(d: List<String>): Test(), List<String> by d
fun Test.eq(that: Test): Boolean {
    return this is TestComparable
        && that is TestComparable
        && this.sorted() == that.sorted()
}
```

Now the problem is that I can write code that will not allow the project to build and I will find out about it only after the build.

kotlin version 1.3.41

IntelliJ IDEA 2019.1.2 (Community Edition)
Build #IC-191.7141.44, built on May 7, 2019
JRE: 1.8.0_202-release-1483-b49 x86_64
JVM: OpenJDK 64-Bit Server VM by JetBrains s.r.o
macOS 10.13.6