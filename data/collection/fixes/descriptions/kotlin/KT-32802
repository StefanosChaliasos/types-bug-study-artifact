Following function 

```
fun blah(thing: String?): String = when (thing) {
    null -> "hello"
    else -> try {
        "goodbye"
    } catch (e: Exception) {
        thing
    }
}
```
The IDE editor recognises that the `thing` reference in the `catch` block is non-null and applies the smart cast - however when compiling (either through the IDE or through a build-tool [gradle]) the following exception occurs:

`Error:(131, 17) Kotlin: Type mismatch: inferred type is String? but String was expected`

Why is the smart-cast non-null information lost in the catch block? An explicit cast solves the problem (although again the IDE editor correctly warns that it's unnecessary:

```
fun blah(thing: String?): String = when (thing) {
    null -> "hello"
    else -> try {
        "goodbye"
    } catch (e: Exception) {
        thing
    } as String
}
```
Kotlin version: kotlinc-jvm 1.3.41 (JRE 1.8.0_202-b08)
IntelliJ version: Ultimate 2019.3.1
Kotlin plugin: v1.3.41-release-IJ2019.1-