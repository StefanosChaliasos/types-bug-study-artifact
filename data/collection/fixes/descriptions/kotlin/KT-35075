_Originated as a Stack Overflow [question](https://stackoverflow.com/q/59007319/7598113)._

Seems like Kotlin compiler cannot handle conditional function references.

```
inline fun String.report(to: (String) -> Unit) = to(this)

fun report(message:String, logger: Logger?=null): (AsyncResult<*>) -> Unit = {
    when (it.succeeded()) {
        true -> "$message constructed".report(logger?::info ? ::print)
        false -> "$message crashed because: ${it.cause()}".report(logger?::error ? ::print)
    }
}
```

Leading to exeption: `org.jetbrains.kotlin.codegen.CompilationException: Back-end (JVM) Internal error: Failed to generate expression: KtLambdaExpression`

Similarly attempt to create a conditional reference to a function like:

```
val problem: (String) -> Unit = (logger?::info ?::print) as (String) -> Unit
```

Leads to a similar exception with message: `Failed to generate expression: KtCallableReferenceExpression`

A more explicit attempt has a weird behavior. 

```
val method : (String) -> Unit = if (logger != null) logger!!::info else ::print
```

Only compiles with not-null assertion operator yet producing a warning:

`Unnecessary non-null assertion (!!) on a non-null receiver of type Logger`

but without `!!` operator compilation fails with an error:

`Only safe (?.) or non-null asserted (!!.) calls are allowed on a nullable receiver of type Logger?`

Environment:

Kotlin plugin version 1.3.60-release-IJ2019.2-1
IntelliJ IDEA 2019.2.4 (Ultimate Edition)
Build #IU-192.7142.36, built on October 29, 2019
Runtime version: 11.0.4+10-b304.77 x86_64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o
macOS 10.14.6