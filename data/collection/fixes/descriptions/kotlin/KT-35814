Consider the following:
```
interface I
class A: I
class B: I

fun test(){
val i: I = listOf(A(), B()).first() // works as expected

val l1 = LocalDate.of(2019, 12, 22) // has type LocalDate!
val j1 = JapaneseDate.of(2019, 12, 22) // has type JapaneseDate!
val c: ChronoLocalDate = listOf(l1, j1).first() // has type Any! instead of ChronoLocalDate!

val l2 : LocalDate = LocalDate.of(2019, 12, 22)  // has type LocalDate
val j2 : JapaneseDate = JapaneseDate.of(2019, 12, 22)  // has type JapaneseDate
val c2 : ChronoLocalDate = listOf(l2, j2).first() ) // has type Any instead of ChronoLocalDate
}
```