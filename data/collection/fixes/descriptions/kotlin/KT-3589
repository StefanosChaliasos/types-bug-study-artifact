{code}
abstract class X(val containingElement: X?) {
    init {
        containingElement?.children?.add(this) // here
    }

    val children: MutableList<X> = ArrayList<X>()
}
{code}
It shouldn't require initialization of value (why it calls it variable?) when invoked on another existing instance, even if in constructor.

Workaround:
{code}
    {
        appendTo(containingElement)
    }

    private fun appendTo(element : X?) = element?.children?.add(this)
{code}
