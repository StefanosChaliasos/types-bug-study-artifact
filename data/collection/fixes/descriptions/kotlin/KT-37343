The problem is that definitely not null types in generic positions can be approximated to unwanted types. For instance, `Inv<T!!>` will be approximated to `Inv<out T>` because the closest super type of `Inv<T!!>` is `Inv<out T>`. At the same time, the old inference obtains `Inv<T>` due to the lack of definitely not null types. The problem can lead to broken code.

It's been already fixed before (by https://github.com/JetBrains/kotlin/commit/5582fd40567c10d0e0582a8bdee980e4af5d6c30), but such fix could lead to errors during incorporation (especially common super type calculation; see KT-36816). The next fix (https://github.com/JetBrains/kotlin/commit/748a326104eb79c1cb8fda5e5d3c57c81f38bfb3) also had problems. For instance, the inconsistency in discarding def not null types could appear: def not null types were discarded in invariant positions during incorporation, but we could add constraint with def not null type in non-generic position (see `simplifyLowerConstraint` in `AbstractTypeCheckerContextForConstraintSystem.kt`). Also the pre-approximation is required not only for def not null types in invariant positions, but in contravariant ones too (`In<T!!>` is approximated to `In<Nothing>` because `In<Nothing>` is the closest known subtype of `In<T!!>`). It's not required for covariant types, because it will be approximated (by approximator) to `T`: `Out<T!!>` -> `Out<T>`.

The rules for the new fix must be following:
1) Pre-approximation must be for def not null types in invariant and **contravariant** positions;
2) It should be based on return type information: pre-approximation is needed only when a def not null type is contained in type arguments of the return type (directly or through dependent type parameter);
3) It should be consistent for any sources of appearing def not null types including `simplifyLowerConstraint`: def not null types are either created wherever required or not created at all (if they are contained in the return type). It's necessary that there are no contradictions in the constant system.