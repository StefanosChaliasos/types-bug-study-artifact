Experimental (not old!) New Project wizard generates `build.gradle.kts` for multiplatform library with a code like:
```
plugins {
    kotlin("multiplatform") version "1.4.0-dev-5730"
}

group = "org.jetbrains-com.ache"
version = "1.2"

repositories {
    mavenCentral()
    maven {
        url = uri("https://dl.bintray.com/kotlin/kotlin-dev")
    }
}

kotlin {
    val hostOs = System.getProperty("os.name")
    val isMingwX64 = hostOs.startsWith("Windows")
    val nativeTarget = when {
        hostOs == "Mac OS X" -> macosX64("native")
        hostOs == "Linux" -> linuxX64("native")
        isMingwX64 -> mingwX64("native")
        else -> throw GradleException("Host OS is not supported in Kotlin/Native.")
    }

    sourceSets {
        val commonMain by getting {
            dependencies {
                implementation(kotlin("stdlib-common"))
            }
        }
        val commonTest by getting {
            dependencies {
                implementation(kotlin("test-common"))
                implementation(kotlin("test-annotations-common"))
            }
        }
        val nativeMain by getting
        val nativeTest by getting
    }
}
```

With IDEA 193.6911.18 + Kotlin IDE plugin 1.4.0-dev-5759 the code `val nativeMain by getting` is green in IDE editor.
With IDEA 193.6911.18 + Kotlin IDE plugin 1.4.0-dev-5761 it's red:
`DELEGATE_SPECIAL_FUNCTION_MISSING: Type ExistingDomainObjectDelegate<out KotlinSourceSet!> has no method getValue(Nothing?, KPropetry<*>) and thus it cannot serve as a delegate`.

The change between two builds is the fix of KT-37406.

Gradle 6.3 executes the script with no error, but 6.3 includes Kotlin 1.3.70, so on embedding the next version it will fail.

If the code in question should be compilable (I'm not sure), the compiler should be fixed.
Otherwise the wizard should be.

NB: `val nativeMain by getting {}` - with an empty lambda - is green.