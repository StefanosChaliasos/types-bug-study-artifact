I have created a simple scratch file that demonstrates a type inference regression in 1.4. This is also reproducible with 1.3.72 and the new type inference enabled in IntelliJ.
https://gist.github.com/gpeal/6e5b4a25b3e446386c8065d5eeece86b

It appears as if the type inference fails to infer the receiver type of the delegate.

Although a temporary workaround is to manually specify all types (Fails.kt#3), this issue is causing [this bug](https://github.com/airbnb/MvRx/issues/433) in [MvRx](https://github.com/airbnb/MvRx).

The MvRx delegates that break are used in thousands of screens across hundreds if not thousands of apps including large ones such as Airbnb, Dropbox, Netflix, and others.

Please advise.

Example:
```kotlin
import kotlin.reflect.KProperty

fun main() {
    println("Works: ${TypeInference().works}")
}

class TypeInference {
    val works by providerFun<TypeInference, String>()
    val doesntWork: String by providerFun()
}

fun <T, R> T.providerFun(): DelegateProvider<T, R> = object : DelegateProvider<T, R>() {
    override fun provideDelegate(thisRef: T, property: KProperty<*>): Lazy<R> {
        TODO("Not yet implemented")
    }

}

abstract class DelegateProvider<T, R> {
    abstract operator fun provideDelegate(
        thisRef: T,
        property: KProperty<*>
    ): Lazy<R>
}
```
```
[DELEGATE_SPECIAL_FUNCTION_MISSING] Type 'DelegateProvider<TypeVariable(T), TypeVariable(R)>' has no method 'getValue(TypeInference, KProperty<*>)' and thus it cannot serve as a delegate
```