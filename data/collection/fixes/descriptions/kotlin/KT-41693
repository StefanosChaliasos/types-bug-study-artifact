Given the following Java class
```
public class Bar {
    public static String bar() {
        return null;
    }
}
```
and the following Kotlin function
```
fun foo(): Any? {
    return if (true) {
        if (true) {
            Bar.bar()
        } else {
            1
        }
    } else {
        1
    }
}
```
calling foo() causes
```
Exception in thread "main" java.lang.NullPointerException: if (true) {
            â€¦{
            1
        } must not be null
```
for the inner if-expression.

Kotlin seems to incorrectly assume that the type of the if-expression should be `Any` (as opposed to `Any?`) even though the Java method potentially returns `null`. If `bar()` is a Kotlin function returning `String?` or if the return value of `Bar.bar()` is immediately cast to `String?` the exception does not occur. Curiously, it only happens when you have nested expressions, but the same problem occurs regardless if `if` or `when` is used.