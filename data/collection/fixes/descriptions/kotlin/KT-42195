I'm using a tree structure in a project (in case the specifics of the type definition are relevant, I've pasted the type definition below), and I've noticed (well, there was no way not to notice) that code that creates even small, shallow instances, takes an extremely long time to compile. The issue is demonstrable even by tiny examples, such as the following (which takes unreasonably long to compile, and which causes IntelliJ to grind to a halt when code analysis is not disabled; this latter point is particularly painful, because it freezes the entire system for **minutes** while it performs its analysis, which it does again and again whenever the code changes, so basically **on every keystroke** - sometimes even when the change is in another file!):

```
val tree = Tree.Inner(
    "root",
    Unit,
    mapOf(
        1 to Tree.Leaf("1", 1),
        2 to Tree.Inner(
            "2",
            Unit,
            mapOf(
                1 to Tree.Leaf("21", 2),
                2 to Tree.Inner(
                    "22",
                    Unit,
                    mapOf(1 to Tree.Leaf("221", 3))
                ),
                3 to Tree.Leaf("23", 4)
            )
        )
    )
)
```

Notes:
* There doesn't seem to be a similar issue when defining similar data using just the built-in `listOf`/`mapOf`.
* The issues [KT-16825](https://youtrack.jetbrains.com/issue/KT-16285) and [KT-39281](https://youtrack.jetbrains.com/issue/KT-39281) might seem related, though, if I understand correctly, they only manifest with *deeply* nested data, whereas the issue here is already noticeable with a depth of 2 or 3 levels.

---
The definition of the `Tree` type:
```
sealed class Tree<TIndex, out TCommon, out TInner, out TLeaf> {
    abstract val value: TCommon
    abstract val children: Map<TIndex, Tree<TIndex, TCommon, TInner, TLeaf>>

    data class Inner<TIndex, TCommon, TInner, TLeaf>(
        override val value: TCommon,
        val innerValue: TInner,
        override val children: Map<TIndex, Tree<TIndex, TCommon, TInner, TLeaf>>
    ) : Tree<TIndex, TCommon, TInner, TLeaf>()

    data class Leaf<TIndex, TCommon, TLeaf>(
        override val value: TCommon,
        val leafValue: TLeaf
    ) : Tree<TIndex, TCommon, Nothing, TLeaf>() {
        override val children: Map<TIndex, Tree<TIndex, TCommon, Nothing, TLeaf>> get() = emptyMap()
    }
}
```