Example 1:
```
class A<T>
class B<T>(val x: MutableList<T>) : MutableList<T> by x

class C {
    operator fun <T> get(k: A<T>): T = TODO()
    operator fun <T> set(k: A<T>, v: T): Unit = TODO()
}

fun foo() {
    C()[A<B<Int>>()] += 2
}
```
`Collection<Int>.plus` returns a `List<Int>`, which is not `B<Int>` and is thus not a valid value for `v` given this `k`.

Example 2:
```
class A<T>(var x: T)

interface I

class C {
    operator fun <T> get(k: A<T>): T = k.x
    operator fun <T : I> set(k: A<T>, v: T) { k.x = v }
}

fun foo() {
    C()[A(mutableListOf(1))] += 2
}
```
`MutableList<Int>` is not an `I`, so `set` should not be resolved based on the type of `k`.

Example 3:
```
class A<T>
class C
interface I

class E {
  operator fun <T> get(k: A<T>): T = TODO()
  operator fun <T : I> set(k: A<T>, v: T) { TODO() }
  operator fun set(k: A<C>, v: C) { TODO() }
}

fun foo() {
  E()[A<MutableList<Int>>()] += 1
}
```
only compiles with `-XXLanguage:-NewInference` (or `-language-version 1.3`), presumably because old inference tries to see if LHS is assignable, sees an unresolved ambiguity between two versions of `set`, and rejects it.

FIR resolves all three to `plusAssign`.