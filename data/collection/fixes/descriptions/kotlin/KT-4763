{code}trait A {
    fun f(): String
}

open class B {
    open fun f(): CharSequence = "charSequence"
}

class C: B(), A // no error

fun main(args: Array<String>) {
    val asA: A = C()
    println(asA.f()) // AbstractMethodError
}{code}

Similar case in Java is not compiled: "C is not abstract and does not override abstract method f() in A"

{code}interface A {
    public String f();
}

class B {
    public CharSequence f() {
        return "charSequence";
    }
}

class C extends B implements A {
}{code}