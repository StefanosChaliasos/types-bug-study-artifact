Java enum:
{code}
public enum J {
    A, B;

    public static J getJ() {
        return J.A;
    }
}
{code}

Kotlin 'when' doesn't compile, it requires an 'else' branch. Because the type of 'J.getJ()' is J! meaning it can be nullable.
{code}
val result = when (J.getJ()) {
        J.A -> 1
        J.B -> 2
    }
{code}

So I need to write something like   ``when (J.getJ() : J)`` . 

At least we need to change an error here (saying the argument is nullable and that's why 'when' is not exhaustive).
Also we may consider interpreting a platform type of 'when' argument as notnullable by default.