```
trait Foo
fun (Foo.() -> Unit).invoke(b : Foo.() -> Unit)  {}

object Z {
 fun add(b : Foo.() -> Unit) : Z = Z

val t2 = A add { } { } 
```

Assertion failed: 'Invoke' is not found on expression of function type (Function0<Unit>): '{ } { }' at (68,16) in /Users/abreslav/work/kotlin/idea/idea-analysis/src/org/jetbrains/jet/plugin/caches/resolve/resolutionApi.kt
java.lang.Throwable
	at com.intellij.openapi.diagnostic.Logger.assertTrue(Logger.java:144)
	at org.jetbrains.jet.lang.resolve.calls.tasks.TracingStrategyForInvoke.functionExpectedOrNoReceiverAllowed(TracingStrategyForInvoke.java:95)
	at org.jetbrains.jet.lang.resolve.calls.tasks.TracingStrategyForInvoke.unresolvedReferenceWrongReceiver(TracingStrategyForInvoke.java:90)
	at org.jetbrains.jet.lang.resolve.calls.results.ResolutionResultsHandler.computeResultAndReportErrors(ResolutionResultsHandler.java:75)
	at org.jetbrains.jet.lang.resolve.calls.CallResolver.performResolution(CallResolver.java:563)
	at org.jetbrains.jet.lang.resolve.calls.CallResolver.performResolutionGuardedForExtraFunctionLiteralArguments(CallResolver.java:483)
	at org.jetbrains.jet.lang.resolve.calls.CallResolver.doResolveCall(CallResolver.java:434)
	at org.jetbrains.jet.lang.resolve.calls.CallResolver.doResolveCallOrGetCachedResults(CallResolver.java:359)
	at org.jetbrains.jet.lang.resolve.calls.CallResolver.resolveCallWithGivenName(CallResolver.java:169)
	at org.jetbrains.jet.lang.resolve.calls.CallResolver.resolveCallForInvoke(CallResolver.java:157)
	at org.jetbrains.jet.lang.resolve.calls.CallResolver.resolveFunctionCall(CallResolver.java:304)
	at org.jetbrains.jet.lang.resolve.calls.CallExpressionResolver.getResolvedCallForFunction(CallExpressionResolver.java:79)
	at org.jetbrains.jet.lang.resolve.calls.CallExpressionResolver.getCallExpressionTypeInfoWithoutFinalTypeCheck(CallExpressionResolver.java:184)
	at org.jetbrains.jet.lang.resolve.calls.CallExpressionResolver.getCallExpressionTypeInfo(CallExpressionResolver.java:167)
	at org.jetbrains.jet.lang.types.expressions.BasicExpressionTypingVisitor.visitCallExpression(BasicExpressionTypingVisitor.java:689)
	at org.jetbrains.jet.lang.types.expressions.BasicExpressionTypingVisitor.visitCallExpression(BasicExpressionTypingVisitor.java:88)
	at org.jetbrains.jet.lang.psi.JetCallExpression.accept(JetCallExpression.java:35)
	at org.jetbrains.jet.lang.types.expressions.ExpressionTypingVisitorDispatcher.visitJetElement(ExpressionTypingVisitorDispatcher.java:232)
	at org.jetbrains.jet.lang.types.expressions.ExpressionTypingVisitorDispatcher.visitJetElement(ExpressionTypingVisitorDispatcher.java:33)
	at org.jetbrains.jet.lang.psi.JetVisitor.visitExpression(JetVisitor.java:162)
	at org.jetbrains.jet.lang.psi.JetVisitor.visitReferenceExpression(JetVisitor.java:178)
	at org.jetbrains.jet.lang.psi.JetVisitor.visitCallExpression(JetVisitor.java:254)
	at org.jetbrains.jet.lang.psi.JetCallExpression.accept(JetCallExpression.java:35)
	at org.jetbrains.jet.lang.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:132)
	at org.jetbrains.jet.lang.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:100)
	at org.jetbrains.jet.lang.types.expressions.ExpressionTypingServices.getTypeInfo(ExpressionTypingServices.java:173)
	at org.jetbrains.jet.lang.resolve.calls.ArgumentTypeResolver.getArgumentTypeInfo(ArgumentTypeResolver.java:187)
	at org.jetbrains.jet.lang.resolve.calls.ArgumentTypeResolver.analyzeArgumentsAndRecordTypes(ArgumentTypeResolver.java:254)
	at org.jetbrains.jet.lang.resolve.calls.CallResolver.doResolveCall(CallResolver.java:423)
	at org.jetbrains.jet.lang.resolve.calls.CallResolver.doResolveCallOrGetCachedResults(CallResolver.java:359)
	at org.jetbrains.jet.lang.resolve.calls.CallResolver.resolveCallWithGivenName(CallResolver.java:169)
	at org.jetbrains.jet.lang.resolve.calls.CallResolver.resolveCallWithGivenName(CallResolver.java:149)
	at org.jetbrains.jet.lang.resolve.calls.CallResolver.resolveCallWithGivenName(CallResolver.java:135)
	at org.jetbrains.jet.lang.resolve.calls.CallResolver.resolveBinaryCall(CallResolver.java:179)
	at org.jetbrains.jet.lang.types.expressions.BasicExpressionTypingVisitor.getTypeInfoForBinaryCall(BasicExpressionTypingVisitor.java:1224)
	at org.jetbrains.jet.lang.types.expressions.BasicExpressionTypingVisitor.visitBinaryExpression(BasicExpressionTypingVisitor.java:894)
	at org.jetbrains.jet.lang.types.expressions.BasicExpressionTypingVisitor.visitBinaryExpression(BasicExpressionTypingVisitor.java:88)
	at org.jetbrains.jet.lang.psi.JetBinaryExpression.accept(JetBinaryExpression.java:33)
	at org.jetbrains.jet.lang.types.expressions.ExpressionTypingVisitorDispatcher.visitJetElement(ExpressionTypingVisitorDispatcher.java:232)
	at org.jetbrains.jet.lang.types.expressions.ExpressionTypingVisitorDispatcher.visitJetElement(ExpressionTypingVisitorDispatcher.java:33)
	at org.jetbrains.jet.lang.psi.JetVisitor.visitExpression(JetVisitor.java:162)
	at org.jetbrains.jet.lang.psi.JetVisitor.visitBinaryExpression(JetVisitor.java:198)
	at org.jetbrains.jet.lang.psi.JetBinaryExpression.accept(JetBinaryExpression.java:33)
	at org.jetbrains.jet.lang.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:132)
	at org.jetbrains.jet.lang.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:100)
	at org.jetbrains.jet.lang.types.expressions.ExpressionTypingServices.getTypeInfo(ExpressionTypingServices.java:168)
	at org.jetbrains.jet.lang.types.expressions.ExpressionTypingServices.getType(ExpressionTypingServices.java:178)
	at org.jetbrains.jet.lang.types.expressions.ExpressionTypingServices.safeGetType(ExpressionTypingServices.java:161)
	at org.jetbrains.jet.lang.resolve.DescriptorResolver.resolveInitializerType(DescriptorResolver.java:1168)
	at org.jetbrains.jet.lang.resolve.DescriptorResolver.access$400(DescriptorResolver.java:65)
	at org.jetbrains.jet.lang.resolve.DescriptorResolver$3.invoke(DescriptorResolver.java:1058)
	at org.jetbrains.jet.lang.resolve.DescriptorResolver$3.invoke(DescriptorResolver.java:1055)
	at org.jetbrains.jet.storage.LockBasedStorageManager$LockBasedLazyValue.invoke(LockBasedStorageManager.java:314)
	at org.jetbrains.jet.storage.LockBasedStorageManager$LockBasedNotNullLazyValue.invoke(LockBasedStorageManager.java:355)
	at org.jetbrains.jet.lang.types.DeferredType.getDelegate(DeferredType.java:86)
	at org.jetbrains.jet.lang.resolve.BodyResolver.computeDeferredType(BodyResolver.java:654)
	at org.jetbrains.jet.lang.resolve.BodyResolver.resolvePropertyDeclarationBodies(BodyResolver.java:450)
	at org.jetbrains.jet.lang.resolve.BodyResolver.resolveBehaviorDeclarationBodies(BodyResolver.java:116)
	at org.jetbrains.jet.lang.resolve.BodyResolver.resolveBodies(BodyResolver.java:135)
	at org.jetbrains.jet.lang.resolve.LazyTopDownAnalyzer.analyzeDeclarations(LazyTopDownAnalyzer.java:330)
	at org.jetbrains.jet.plugin.caches.resolve.KotlinResolveDataProvider.analyze(KotlinResolveCache.kt:254)
	at org.jetbrains.jet.plugin.caches.resolve.PerFileAnalysisCache.analyze(KotlinResolveCache.kt:178)
	at org.jetbrains.jet.plugin.caches.resolve.PerFileAnalysisCache.analyze$b$2(KotlinResolveCache.kt:125)
	at org.jetbrains.jet.plugin.caches.resolve.PerFileAnalysisCache.getAnalysisResults(KotlinResolveCache.kt:163)
	at org.jetbrains.jet.plugin.caches.resolve.KotlinResolveCache.getAnalysisResultsForElements(KotlinResolveCache.kt:113)
	at org.jetbrains.jet.plugin.caches.resolve.KotlinCacheService$getResolutionFacade$1.analyzeFullyAndGetResult(KotlinCacheService.kt:66)
	at org.jetbrains.jet.plugin.caches.resolve.ResolvePackage$resolutionApi$859eb6cc.analyzeFullyAndGetResult(resolutionApi.kt:58)
	at org.jetbrains.jet.plugin.highlighter.JetPsiChecker.annotate(JetPsiChecker.kt:63)
	at org.jetbrains.jet.plugin.highlighter.JetPsiCheckerAndHighlightingUpdater.annotate(JetPsiCheckerAndHighlightingUpdater.java:29)
	at com.intellij.codeInsight.daemon.impl.DefaultHighlightVisitor.a(DefaultHighlightVisitor.java:160)
	at com.intellij.codeInsight.daemon.impl.DefaultHighlightVisitor.visit(DefaultHighlightVisitor.java:103)
	at com.intellij.codeInsight.daemon.impl.GeneralHighlightingPass$5.run(GeneralHighlightingPass.java:313)
	at com.intellij.codeInsight.daemon.impl.GeneralHighlightingPass.a(GeneralHighlightingPass.java:399)
	at com.intellij.codeInsight.daemon.impl.GeneralHighlightingPass.access$300(GeneralHighlightingPass.java:64)
	at com.intellij.codeInsight.daemon.impl.GeneralHighlightingPass$6.run(GeneralHighlightingPass.java:405)
	at com.intellij.codeInsight.daemon.impl.DefaultHighlightVisitor.analyze(DefaultHighlightVisitor.java:87)
	at com.intellij.codeInsight.daemon.impl.GeneralHighlightingPass.a(GeneralHighlightingPass.java:402)
	at com.intellij.codeInsight.daemon.impl.GeneralHighlightingPass.access$300(GeneralHighlightingPass.java:64)
	at com.intellij.codeInsight.daemon.impl.GeneralHighlightingPass$6.run(GeneralHighlightingPass.java:405)
	at com.intellij.codeInsight.daemon.impl.RefCountHolder.analyze(RefCountHolder.java:321)
	at com.intellij.codeInsight.daemon.impl.analysis.HighlightVisitorImpl.analyze(HighlightVisitorImpl.java:175)
	at com.intellij.codeInsight.daemon.impl.GeneralHighlightingPass.a(GeneralHighlightingPass.java:402)
	at com.intellij.codeInsight.daemon.impl.GeneralHighlightingPass.a(GeneralHighlightingPass.java:390)
	at com.intellij.codeInsight.daemon.impl.GeneralHighlightingPass.collectInformationWithProgress(GeneralHighlightingPass.java:230)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:91)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:62)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass$1$1.run(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1146)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass$1.run(PassExecutorService.java:429)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.a(ProgressManagerImpl.java:281)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:233)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.a(PassExecutorService.java:426)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:402)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask.exec(JobLauncherImpl.java:202)
	at jsr166e.ForkJoinTask.doExec(ForkJoinTask.java:260)
	at jsr166e.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:858)
	at jsr166e.ForkJoinPool.scan(ForkJoinPool.java:1687)
	at jsr166e.ForkJoinPool.runWorker(ForkJoinPool.java:1642)
	at jsr166e.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:109)


------------------ Initial report

For extension functions it's wellknown to use syntax like {{fun TYPE.method() { ... } }}. It's not clear how one can have an extension function for a function type.

For example, I'd like to have a method {{ chain() }} available for a {{builder}} variable in {code}fun z(builder : Foo.() -> Unit) { builder.chain() } {code} similar applies for a lambda function  {code}fun z(builder : (Foo) -> Unit) { builder.chain() } {code}