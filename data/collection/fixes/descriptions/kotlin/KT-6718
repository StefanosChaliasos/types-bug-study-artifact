Here's an example:

{code lang=kt}
class Foo(val bar: String, val sort: String)

fun main(args : Array<String>) {
  println(Foo::bar)   // This works
  println(Foo::sort)  // This doesn't - seems to search the global scope
}
{code}

Results in:

(5, 16) : Unresolved reference. None of the following candidates is applicable because of receiver type mismatch: 
public fun kotlin.IntArray.sort(fromIndex: kotlin.Int = ..., toIndex: kotlin.Int = ...): kotlin.Unit defined in kotlin
public fun kotlin.ShortArray.sort(fromIndex: kotlin.Int = ..., toIndex: kotlin.Int = ...): kotlin.Unit defined in kotlin
public fun kotlin.DoubleArray.sort(fromIndex: kotlin.Int = ..., toIndex: kotlin.Int = ...): kotlin.Unit defined in kotlin
public fun <T> kotlin.Array<out T>.sort(fromIndex: kotlin.Int = ..., toIndex: kotlin.Int = ...): kotlin.Unit defined in kotlin
public fun kotlin.FloatArray.sort(fromIndex: kotlin.Int = ..., toIndex: kotlin.Int = ...): kotlin.Unit defined in kotlin
kotlin.deprecated public fun <T> kotlin.Iterable<T>.sort(comparator: java.util.Comparator<T>): kotlin.List<T> defined in kotlin
public fun kotlin.LongArray.sort(fromIndex: kotlin.Int = ..., toIndex: kotlin.Int = ...): kotlin.Unit defined in kotlin
public fun <T : kotlin.Comparable<T>> kotlin.Iterable<T>.sort(): kotlin.List<T> defined in kotlin
public fun kotlin.CharArray.sort(fromIndex: kotlin.Int = ..., toIndex: kotlin.Int = ...): kotlin.Unit defined in kotlin
public fun kotlin.ByteArray.sort(fromIndex: kotlin.Int = ..., toIndex: kotlin.Int = ...): kotlin.Unit defined in kotlin

Workaround:

The only "fix" I've found is to rename properties to names that aren't defined in the existing scope.
