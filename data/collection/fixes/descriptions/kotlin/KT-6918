Java:
{code}
interface Subscriber<T> {}
interface Func1<T, R> {
    R call(T t);
}
interface Operator<R, T> extends Func1<Subscriber<? super R>, Subscriber<? super T>> {}
interface Observable<T> {
    <R> Observable<R> lift(Operator<? extends R, ? super T> op);
}
{code}

Kotlin:
{code}
fun Observable<String>.fn(): Observable<String> {
    return lift { s -> s } // fails
    return lift(Operator({ s -> s })) // works
}
{code}
