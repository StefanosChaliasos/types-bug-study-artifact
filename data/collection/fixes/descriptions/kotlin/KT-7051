Minimal sample:

p1/BaseClass.java:

{code lang=java}
package p1;

public class BaseClass {
    protected final class ProtSubClass {
        public ProtSubClass() {}
    }
}
{code}

usage from java class compiles fine - p2/SubClass.java:

{code lang=java}
package p2;

class SubClass extends p1.BaseClass {
    p1.BaseClass.ProtSubClass v1 = new ProtSubClass();
}
{code}

but same one from kotlin - doesn't:

{code lang=kotlin}
package k1

class Foo : p1.BaseClass() {
    val v1: p1.BaseClass.ProtSubClass = super.ProtSubClass()
}
{code}
:
{code}
Error:(4, 26) Kotlin: Cannot access 'ProtSubClass': it is 'protected/*protected and package*/' in 'BaseClass'
Error:(4, 47) Kotlin: Cannot access 'ProtSubClass': it is 'protected/*protected and package*/' in 'BaseClass'
{code}
