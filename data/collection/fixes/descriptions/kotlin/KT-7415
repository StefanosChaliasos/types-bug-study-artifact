Dependencies:

{monospace}
dependencies {
    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.11.91.1'
    compile 'io.reactivex:rxjava:1.0.8'
}
{monospace}

The error:

{monospace}
Error:(48, 14) Kotlin: [Internal Error] org.jetbrains.kotlin.codegen.CompilationException: Back-end (JVM) Internal error: Error type encountered: org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@66339d36 (ErrorTypeImpl). One of the possible reasons may be that this type is not directly accessible from this module. To workaround this error, try adding an explicit dependency on the module or library which contains this type to the classpath
Cause: Error type encountered: org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@66339d36 (ErrorTypeImpl). One of the possible reasons may be that this type is not directly accessible from this module. To workaround this error, try adding an explicit dependency on the module or library which contains this type to the classpath
File being compiled and position: (48,14) in C:/Users/cbeust/kotlin/kotlin-example/src/main/kotlin/SlidingWindow.kt
PsiElement: slidingWindow(3)
The root cause was thrown at: JetTypeMapper.java:277
	at org.jetbrains.kotlin.codegen.ExpressionCodegen.genQualified(ExpressionCodegen.java:295)
	at org.jetbrains.kotlin.codegen.ExpressionCodegen.genQualified(ExpressionCodegen.java:260)
	at org.jetbrains.kotlin.codegen.ExpressionCodegen.visitDotQualifiedExpression(ExpressionCodegen.java:2924)
	at org.jetbrains.kotlin.codegen.ExpressionCodegen.visitDotQualifiedExpression(ExpressionCodegen.java:104)
	at org.jetbrains.kotlin.psi.JetDotQualifiedExpression.accept(JetDotQualifiedExpression.java:44)
	at org.jetbrains.kotlin.codegen.ExpressionCodegen.genQualified(ExpressionCodegen.java:278)
	at org.jetbrains.kotlin.codegen.ExpressionCodegen.genQualified(ExpressionCodegen.java:260)
	at org.jetbrains.kotlin.codegen.ExpressionCodegen.gen(ExpressionCodegen.java:301)
	at org.jetbrains.kotlin.codegen.ExpressionCodegen.generateReceiverValue(ExpressionCodegen.java:2463)
	at org.jetbrains.kotlin.codegen.StackValue.genReceiver(StackValue.java:472)
	at org.jetbrains.kotlin.codegen.StackValue.receiver(StackValue.java:451)
	at org.jetbrains.kotlin.codegen.ExpressionCodegen.invokeMethodWithArguments(ExpressionCodegen.java:2349)
	at org.jetbrains.kotlin.codegen.ExpressionCodegen.invokeMethodWithArguments(ExpressionCodegen.java:2338)
	at org.jetbrains.kotlin.codegen.ExpressionCodegen$9.invoke(ExpressionCodegen.java:2261)
	at org.jetbrains.kotlin.codegen.ExpressionCodegen$9.invoke(ExpressionCodegen.java:2257)
	at org.jetbrains.kotlin.codegen.OperationStackValue.putSelector(StackValue.kt:75)
	at org.jetbrains.kotlin.codegen.StackValueWithLeaveTask.putSelector(StackValue.kt:67)
	at org.jetbrains.kotlin.codegen.StackValue.put(StackValue.java:100)
	at org.jetbrains.kotlin.codegen.StackValue.put(StackValue.java:93)
	at org.jetbrains.kotlin.codegen.ExpressionCodegen.gen(ExpressionCodegen.java:306)
	at org.jetbrains.kotlin.codegen.ExpressionCodegen.returnExpression(ExpressionCodegen.java:1852)
	at org.jetbrains.kotlin.codegen.FunctionGenerationStrategy$FunctionDefault.doGenerateBody(FunctionGenerationStrategy.java:50)
	at org.jetbrains.kotlin.codegen.FunctionGenerationStrategy$CodegenBased.generateBody(FunctionGenerationStrategy.java:72)
	at org.jetbrains.kotlin.codegen.FunctionCodegen.generateMethodBody(FunctionCodegen.java:357)
	at org.jetbrains.kotlin.codegen.FunctionCodegen.generateMethod(FunctionCodegen.java:200)
	at org.jetbrains.kotlin.codegen.FunctionCodegen.generateMethod(FunctionCodegen.java:133)
	at org.jetbrains.kotlin.codegen.FunctionCodegen.gen(FunctionCodegen.java:110)
	at org.jetbrains.kotlin.codegen.MemberCodegen.genFunctionOrProperty(MemberCodegen.java:150)
	at org.jetbrains.kotlin.codegen.ClassBodyCodegen.generateDeclaration(ClassBodyCodegen.java:93)
	at org.jetbrains.kotlin.codegen.ImplementationBodyCodegen.generateDeclaration(ImplementationBodyCodegen.java:1644)
	at org.jetbrains.kotlin.codegen.ClassBodyCodegen.generateBody(ClassBodyCodegen.java:68)
	at org.jetbrains.kotlin.codegen.MemberCodegen.generate(MemberCodegen.java:109)
	at org.jetbrains.kotlin.codegen.MemberCodegen.genClassOrObject(MemberCodegen.java:201)
	at org.jetbrains.kotlin.codegen.PackageCodegen.generateClassOrObject(PackageCodegen.java:396)
	at org.jetbrains.kotlin.codegen.PackageCodegen.generate(PackageCodegen.java:306)
	at org.jetbrains.kotlin.codegen.PackageCodegen.generate(PackageCodegen.java:212)
	at org.jetbrains.kotlin.codegen.KotlinCodegenFacade.generatePackage(KotlinCodegenFacade.java:80)
	at org.jetbrains.kotlin.codegen.KotlinCodegenFacade.compileCorrectFiles(KotlinCodegenFacade.java:67)
	at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.generate(KotlinToJVMBytecodeCompiler.java:378)
	at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.compileModules(KotlinToJVMBytecodeCompiler.java:148)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.java:179)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.java:53)
	at org.jetbrains.kotlin.cli.common.CLICompiler.exec(CLICompiler.java:148)
	at org.jetbrains.kotlin.cli.common.CLICompiler.exec(CLICompiler.java:128)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execAndOutputXml(CLICompiler.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.jetbrains.kotlin.compilerRunner.CompilerRunnerUtil.invokeExecMethod(CompilerRunnerUtil.java:92)
	at org.jetbrains.kotlin.compilerRunner.KotlinCompilerRunner.execCompiler(KotlinCompilerRunner.java:120)
	at org.jetbrains.kotlin.compilerRunner.KotlinCompilerRunner.runCompiler(KotlinCompilerRunner.java:95)
	at org.jetbrains.kotlin.compilerRunner.KotlinCompilerRunner.runK2JvmCompiler(KotlinCompilerRunner.java:63)
	at org.jetbrains.kotlin.jps.build.KotlinBuilder.compileToJvm(KotlinBuilder.kt:467)
	at org.jetbrains.kotlin.jps.build.KotlinBuilder.doCompileModuleChunk(KotlinBuilder.kt:233)
	at org.jetbrains.kotlin.jps.build.KotlinBuilder.build(KotlinBuilder.kt:134)
	at org.jetbrains.jps.incremental.IncProjectBuilder.runModuleLevelBuilders(IncProjectBuilder.java:1170)
	at org.jetbrains.jps.incremental.IncProjectBuilder.runBuildersForChunk(IncProjectBuilder.java:851)
	at org.jetbrains.jps.incremental.IncProjectBuilder.buildTargetsChunk(IncProjectBuilder.java:919)
	at org.jetbrains.jps.incremental.IncProjectBuilder.buildChunkIfAffected(IncProjectBuilder.java:814)
	at org.jetbrains.jps.incremental.IncProjectBuilder.buildChunks(IncProjectBuilder.java:637)
	at org.jetbrains.jps.incremental.IncProjectBuilder.runBuild(IncProjectBuilder.java:370)
	at org.jetbrains.jps.incremental.IncProjectBuilder.build(IncProjectBuilder.java:191)
	at org.jetbrains.jps.cmdline.BuildRunner.runBuild(BuildRunner.java:137)
	at org.jetbrains.jps.cmdline.BuildSession.runBuild(BuildSession.java:293)
	at org.jetbrains.jps.cmdline.BuildSession.run(BuildSession.java:124)
	at org.jetbrains.jps.cmdline.BuildMain$MyMessageHandler$1.run(BuildMain.java:242)
	at org.jetbrains.jps.service.impl.SharedThreadPoolImpl$1.run(SharedThreadPoolImpl.java:41)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.IllegalStateException: Error type encountered: org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@66339d36 (ErrorTypeImpl). One of the possible reasons may be that this type is not directly accessible from this module. To workaround this error, try adding an explicit dependency on the module or library which contains this type to the classpath
	at org.jetbrains.kotlin.codegen.state.JetTypeMapper.mapType(JetTypeMapper.java:277)
	at org.jetbrains.kotlin.codegen.state.JetTypeMapper.mapType(JetTypeMapper.java:227)
	at org.jetbrains.kotlin.codegen.state.JetTypeMapper.writeGenericType(JetTypeMapper.java:427)
	at org.jetbrains.kotlin.codegen.state.JetTypeMapper.mapKnownAsmType(JetTypeMapper.java:479)
	at org.jetbrains.kotlin.codegen.state.JetTypeMapper.mapType(JetTypeMapper.java:254)
	at org.jetbrains.kotlin.codegen.state.JetTypeMapper.mapType(JetTypeMapper.java:227)
	at org.jetbrains.kotlin.codegen.state.JetTypeMapper.writeGenericType(JetTypeMapper.java:427)
	at org.jetbrains.kotlin.codegen.state.JetTypeMapper.mapType(JetTypeMapper.java:316)
	at org.jetbrains.kotlin.codegen.state.JetTypeMapper.mapReturnType(JetTypeMapper.java:185)
	at org.jetbrains.kotlin.codegen.state.JetTypeMapper.mapSignature(JetTypeMapper.java:709)
	at org.jetbrains.kotlin.codegen.state.JetTypeMapper.mapSignature(JetTypeMapper.java:669)
	at org.jetbrains.kotlin.codegen.state.JetTypeMapper.mapSignature(JetTypeMapper.java:661)
	at org.jetbrains.kotlin.codegen.state.JetTypeMapper.mapToCallableMethod(JetTypeMapper.java:545)
	at org.jetbrains.kotlin.codegen.ExpressionCodegen.resolveToCallableMethod(ExpressionCodegen.java:2317)
	at org.jetbrains.kotlin.codegen.ExpressionCodegen.resolveToCallable(ExpressionCodegen.java:2312)
	at org.jetbrains.kotlin.codegen.ExpressionCodegen.invokeFunction(ExpressionCodegen.java:2253)
	at org.jetbrains.kotlin.codegen.ExpressionCodegen.invokeFunction(ExpressionCodegen.java:2230)
	at org.jetbrains.kotlin.codegen.ExpressionCodegen.visitCallExpression(ExpressionCodegen.java:2169)
	at org.jetbrains.kotlin.codegen.ExpressionCodegen.visitCallExpression(ExpressionCodegen.java:104)
	at org.jetbrains.kotlin.psi.JetCallExpression.accept(JetCallExpression.java:35)
	at org.jetbrains.kotlin.codegen.ExpressionCodegen.genQualified(ExpressionCodegen.java:278)
	... 72 more
{monospace}

The code:

{code lang=kotlin}

package com.beust.kotlin

import rx.Observable
import rx.Subscriber
import java.util.ArrayList

class SwSubscriber<T> (val child: Subscriber<in List<T>>, val size: Int)
        : Subscriber<T>(child)
{
    var buffer: ArrayList<T>? = null

    override fun onCompleted() {
    }

    override fun onError(e: Throwable?) {
    }

    override fun onNext(t: T) {
        if (buffer == null) {
            buffer = ArrayList<T>(size)
        }
        buffer!!.add(t)
        if (buffer!!.size() == size) {
            val oldBuffer = buffer
            buffer = ArrayList(oldBuffer?.subList(1, size))
            child.onNext(oldBuffer)
        }
    }
}

class SwOperator<T>(val n: Int) : Observable.Operator<List<T>, T> {
    override fun call(child: Subscriber<in List<T>>): Subscriber<in T>? =
            SwSubscriber(child, n)
}

fun <T> Observable<T>.slidingWindow(n: Int) =
    lift(SwOperator(n))

class SlidingWindow {
    fun run(args: Array<String>) {
        Observable.just(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
            .slidingWindow(3)
//            .buffer(3, 1)
            .subscribe { l: List<Int> ->
                p("Received ${l}")
            }
    }
}
{code}
