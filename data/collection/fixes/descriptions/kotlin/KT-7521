//module test with java 6
//file test.kt
{code}
package z
import java.lang.reflect.GenericDeclaration

public fun enclosingEntity(_class: Class<*>): GenericDeclaration? {
    val result = _class.getEnclosingConstructor()
            ?: _class.getEnclosingMethod()
            ?: _class.getEnclosingClass()

    return result as GenericDeclaration?
}

fun main(args: Array<String>) {
    enclosingEntity(javaClass<String>())
}
{code}

//module test2 with java 8
//file zzz.kt
{code}
package zzzz

import z.enclosingEntity

fun main(args: Array<String>) {
    enclosingEntity(javaClass<String>())
}
{code}

test2 depends on test

Do project rebuild then try to run main fun from test project:
{cut Exception}
Exception in thread "main" java.lang.NoClassDefFoundError: java/lang/reflect/Executable
	at z.ZPackage.main(test.kt:1)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)
Caused by: java.lang.ClassNotFoundException: java.lang.reflect.Executable
	at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
	... 6 more
{cut}