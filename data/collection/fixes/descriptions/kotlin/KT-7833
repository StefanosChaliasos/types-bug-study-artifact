{code}
class X<T : Any>(val klass: Class<T>, val handler: (T) -> String)

fun foo(x: X<*>) {
    x.handler.invoke()
}
{code}

"invoke" is highlighted in red.
If I change the code to

{code}
x.handler()
{code}

the following exception happens:

Assertion failed: 'Invoke' is not found on expression of function type (Function1<*, String>): 'handler()' at (4,7) in /Users/valentin/IdeaProjects/TTTTT/src/AD.kt
java.lang.Throwable
	at com.intellij.openapi.diagnostic.Logger.assertTrue(Logger.java:144)
	at org.jetbrains.kotlin.resolve.calls.tasks.TracingStrategyForInvoke.functionExpectedOrNoReceiverAllowed(TracingStrategyForInvoke.java:95)
	at org.jetbrains.kotlin.resolve.calls.tasks.TracingStrategyForInvoke.unresolvedReference(TracingStrategyForInvoke.java:83)
	at org.jetbrains.kotlin.resolve.calls.CallResolver.doResolveCall(CallResolver.java:531)
	at org.jetbrains.kotlin.resolve.calls.CallResolver.doResolveCallOrGetCachedResults(CallResolver.java:426)
	at org.jetbrains.kotlin.resolve.calls.CallResolver.computeTasksAndResolveCall(CallResolver.java:182)
	at org.jetbrains.kotlin.resolve.calls.CallResolver.resolveCallForInvoke(CallResolver.java:156)
	at org.jetbrains.kotlin.resolve.calls.CallTransformer$1.transformCall(CallTransformer.java:243)
	at org.jetbrains.kotlin.resolve.calls.CallResolver.performResolution(CallResolver.java:563)
	at org.jetbrains.kotlin.resolve.calls.CallResolver.doResolveCall(CallResolver.java:501)
	at org.jetbrains.kotlin.resolve.calls.CallResolver.doResolveCallOrGetCachedResults(CallResolver.java:426)
	at org.jetbrains.kotlin.resolve.calls.CallResolver.computeTasksAndResolveCall(CallResolver.java:182)
	at org.jetbrains.kotlin.resolve.calls.CallResolver.computeTasksAndResolveCall(CallResolver.java:170)
	at org.jetbrains.kotlin.resolve.calls.CallResolver.resolveFunctionCall(CallResolver.java:247)
	at org.jetbrains.kotlin.resolve.calls.CallExpressionResolver.getResolvedCallForFunction(CallExpressionResolver.java:84)
	at org.jetbrains.kotlin.resolve.calls.CallExpressionResolver.getCallExpressionTypeInfoWithoutFinalTypeCheck(CallExpressionResolver.java:197)
	at org.jetbrains.kotlin.resolve.calls.CallExpressionResolver.getSelectorReturnTypeInfo(CallExpressionResolver.java:278)
	at org.jetbrains.kotlin.resolve.calls.CallExpressionResolver.getQualifiedExpressionTypeInfo(CallExpressionResolver.java:344)
	at org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor.visitQualifiedExpression(BasicExpressionTypingVisitor.java:852)
	at org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor.visitQualifiedExpression(BasicExpressionTypingVisitor.java:93)
	at org.jetbrains.kotlin.psi.JetVisitor.visitDotQualifiedExpression(JetVisitor.java:282)
	at org.jetbrains.kotlin.psi.JetDotQualifiedExpression.accept(JetDotQualifiedExpression.java:44)
	at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.visitJetElement(ExpressionTypingVisitorDispatcher.java:300)
	at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.visitJetElement(ExpressionTypingVisitorDispatcher.java:39)
	at org.jetbrains.kotlin.psi.JetVisitor.visitExpression(JetVisitor.java:166)
	at org.jetbrains.kotlin.psi.JetVisitor.visitQualifiedExpression(JetVisitor.java:266)
	at org.jetbrains.kotlin.psi.JetVisitor.visitDotQualifiedExpression(JetVisitor.java:282)
	at org.jetbrains.kotlin.psi.JetDotQualifiedExpression.accept(JetDotQualifiedExpression.java:44)
	at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:172)
	at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:142)
	at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements.visitExpression(ExpressionTypingVisitorForStatements.java:382)
	at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements.visitExpression(ExpressionTypingVisitorForStatements.java:61)
	at org.jetbrains.kotlin.psi.JetVisitor.visitQualifiedExpression(JetVisitor.java:266)
	at org.jetbrains.kotlin.psi.JetVisitor.visitDotQualifiedExpression(JetVisitor.java:282)
	at org.jetbrains.kotlin.psi.JetDotQualifiedExpression.accept(JetDotQualifiedExpression.java:44)
	at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:172)
	at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:149)
	at org.jetbrains.kotlin.types.expressions.ExpressionTypingServices.getTypeOfLastExpressionInBlock(ExpressionTypingServices.java:282)
	at org.jetbrains.kotlin.types.expressions.ExpressionTypingServices.getBlockReturnedTypeWithWritableScope(ExpressionTypingServices.java:240)
	at org.jetbrains.kotlin.types.expressions.ExpressionTypingServices.getBlockReturnedType(ExpressionTypingServices.java:173)
	at org.jetbrains.kotlin.types.expressions.ExpressionTypingServices.getBlockReturnedType(ExpressionTypingServices.java:144)
	at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements.visitBlockExpression(ExpressionTypingVisitorForStatements.java:425)
	at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements.visitBlockExpression(ExpressionTypingVisitorForStatements.java:61)
	at org.jetbrains.kotlin.psi.JetBlockExpression.accept(JetBlockExpression.java:44)
	at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:172)
	at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:149)
	at org.jetbrains.kotlin.types.expressions.ExpressionTypingServices.checkFunctionReturnType(ExpressionTypingServices.java:139)
	at org.jetbrains.kotlin.types.expressions.ExpressionTypingServices.checkFunctionReturnType(ExpressionTypingServices.java:123)
	at org.jetbrains.kotlin.resolve.BodyResolver.resolveFunctionBody(BodyResolver.java:758)
	at org.jetbrains.kotlin.resolve.BodyResolver.resolveFunctionBody(BodyResolver.java:729)
	at org.jetbrains.kotlin.resolve.lazy.ElementResolver.functionAdditionalResolve(ElementResolver.kt:342)
	at org.jetbrains.kotlin.resolve.lazy.ElementResolver.performElementAdditionalResolve(ElementResolver.kt:128)
	at org.jetbrains.kotlin.idea.project.ResolveElementCache.access$000(ResolveElementCache.java:42)
	at org.jetbrains.kotlin.idea.project.ResolveElementCache$1$1.invoke(ResolveElementCache.java:62)
	at org.jetbrains.kotlin.idea.project.ResolveElementCache$1$1.invoke(ResolveElementCache.java:59)
	at org.jetbrains.kotlin.storage.LockBasedStorageManager$MapBasedMemoizedFunction.invoke(LockBasedStorageManager.java:385)
	at org.jetbrains.kotlin.storage.LockBasedStorageManager$MapBasedMemoizedFunctionToNotNull.invoke(LockBasedStorageManager.java:434)
	at org.jetbrains.kotlin.idea.project.ResolveElementCache.getElementAdditionalResolve(ResolveElementCache.java:77)
	at org.jetbrains.kotlin.resolve.lazy.ElementResolver.resolveToElement(ElementResolver.kt:70)
	at org.jetbrains.kotlin.idea.project.ResolveSessionForBodies.resolveToElement(ResolveSessionForBodies.java:57)
	at org.jetbrains.kotlin.idea.caches.resolve.KotlinCacheService$getResolutionFacade$1.analyze(KotlinCacheService.kt:56)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolvePackage$resolutionApi$71c72844.analyze(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolvePackage$resolutionApi$71c72844.analyze$default(resolutionApi.kt:41)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolvePackage.analyze$default(Unknown Source)
	at org.jetbrains.kotlin.idea.highlighter.KotlinRecursiveCallLineMarkerProvider.isRecursiveCall(KotlinRecursiveCallLineMarkerProvider.kt:71)
	at org.jetbrains.kotlin.idea.highlighter.KotlinRecursiveCallLineMarkerProvider.collectSlowLineMarkers(KotlinRecursiveCallLineMarkerProvider.kt:48)
	at com.intellij.codeInsight.daemon.impl.SlowLineMarkersPass.addLineMarkers(SlowLineMarkersPass.java:78)
	at com.intellij.codeInsight.daemon.impl.SlowLineMarkersPass.doCollectInformation(SlowLineMarkersPass.java:65)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:67)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass$1$1.run(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1098)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass$1.run(PassExecutorService.java:429)
	at com.intellij.openapi.progress.impl.CoreProgressManager.a(CoreProgressManager.java:452)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:402)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:54)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.a(PassExecutorService.java:426)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:402)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask.exec(JobLauncherImpl.java:202)
	at jsr166e.ForkJoinTask.doExec(ForkJoinTask.java:260)
	at jsr166e.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:858)
	at jsr166e.ForkJoinPool.scan(ForkJoinPool.java:1687)
	at jsr166e.ForkJoinPool.runWorker(ForkJoinPool.java:1642)
	at jsr166e.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:109)
