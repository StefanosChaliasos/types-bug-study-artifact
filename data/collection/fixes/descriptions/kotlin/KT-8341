# Synopsis

Type of change:
- New diagnostics: errors

Motivation:
- The compiler accepts code that shouldn't compile

Impact:
- Some code that used to compile wonâ€™t compile anymore

Migration:
- All code locations affected by this change can be accurately detected statically
- Migration can be automated

# Summary

Currently, Kotlin compiler allows declaring type parameter for a local variable but it's impossible to use it anywhere (not as a type reference, not in the right-hand side of an assignment). Moreover, type parameter for a local variable doesn't make sense as it can't be specialized and therefore should be prohibited.

# Existing behavior

### Code sample

``` kotlin
fun main(args: Array<String>) {
    val <T : __UNRESOLVED__> x = ""
}
```

The problem is that this code is accepted in Kotlin 1.0. 
There is no footprint of this type parameter in the generated bytecode or Kotlin metadata.

# Proposed behavior

Forbid declaring type parameters for local variables.

# Impact of change

Such code seems to be very rare as it's impossible to use declared type parameter anywhere making the whole construction quite meaningless.

# Migration

- Report a warning in 1.3.x
  - Report error in progressive mode
Corrected code will work and compile fine in a regular (non-progressive) mode
- Turn the warning into an error in 1.4

It's possible to add an IDE intention that will remove type parameters for local variables, it will ease the migration