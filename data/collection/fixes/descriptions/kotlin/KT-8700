At this moment, 'Bad local variable type for exhaustive when without else' occurs when local variable is initialized inside such a when (see KT-6046). The similar situations are property initialization (see KT-5113) and return / break / Nothing in all branches (see KT-1882). In all these situations, exception in else branch must be generated in codegen.

Example to reproduce:

{code:lang=kotlin}
enum class A { V }

fun main(args: Array<String>) {
  val a: A = A.V
  val b: Boolean
  when (a) {
    A.V -> b = true
  }
  println(if (b) "true" else "false")
}
{code}

This code compiles but on runtime the following exception is thrown:
{code}
Exception in thread "main" java.lang.VerifyError: Bad local variable type
Exception Details:
  Location:
    _DefaultPackage$Test$7c1a3a4b.main([Ljava/lang/String;)V @38: iload_2
  Reason:
    Type top (current frame, locals[2]) is not assignable to integer
  Current Frame:
    bci: @38
    flags: { }
    locals: { '[Ljava/lang/String;', 'A' }
    stack: { }
  Bytecode:
    0x0000000: 2a12 09b8 000f b200 154c 2bb2 001b 5fb6
    0x0000010: 001f 2eab 0000 0013 0000 0001 0000 0001
    0x0000020: 0000 0011 043d 1c99 0008 1221 a700 0512
    0x0000030: 23b8 0029 b1                           
  Stackmap Table:
    append_frame(@36,Object[#17])
    same_frame(@38)
    same_frame(@47)
    same_locals_1_stack_item_frame(@49,Object[#47])

	at _DefaultPackage.main(Test.kt:1)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)
{code}