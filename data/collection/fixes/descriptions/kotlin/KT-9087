I wasn't sure if I should separate this into two issues, since it seems very closely related to me, but these are the simple code samples that cause issues. These were ran on the 0.12.1230 JVM version and also verified in the demo page.

This does a type mismatch if you use a regular ct[3] = c[3] + 2, but compiles with an internal compiler error when you use +=. 
{code:lang=kotlin}
class GetSetter {
    var s = 0.0
    fun get(k: Int): Int = 0
    fun set(j: Double, k: Double) {
        s  = j
    }
}
fun main(args: Array<String>) {
    val gs = GetSetter()
    gs[3] += 2
}
{code}

Error and Stack Trace Follows:

Error:(8, 1) Kotlin: [Internal Error] org.jetbrains.kotlin.codegen.CompilationException: Back-end (JVM) Internal error: wrong code generatedjava.lang.NegativeArraySizeException null
bytecode:
    @Ljet/runtime/typeinfo/JetValueParameter;(name="args") // parameter 0
    @Lorg/jetbrains/annotations/NotNull;() // invisible, parameter 0
   L0
   L1
    ALOAD 0
    LDC "args"
    INVOKESTATIC kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull (Ljava/lang/Object;Ljava/lang/String;)V
   L2
    LINENUMBER 9 L2
    NEW GetterSetter
    DUP
    INVOKESPECIAL GetterSetter.<init> ()V
    ASTORE 1
   L3
   L4
    LINENUMBER 10 L4
    ALOAD 1
    ICONST_3
    ISTORE 2
    ASTORE 3
    ALOAD 3
    ILOAD 2
    ALOAD 3
    ILOAD 2
    INVOKEVIRTUAL GetterSetter.get (I)I
    ICONST_3
    IADD
    I2D
    INVOKEVIRTUAL GetterSetter.set (DD)V
   L5
    LINENUMBER 11 L5
    RETURN
   L6
    LOCALVARIABLE ct LGetterSetter; L3 L6 1
    LOCALVARIABLE args [Ljava/lang/String; L0 L6 0
    MAXSTACK = 4
    MAXLOCALS = 4
Cause: java.lang.NegativeArraySizeException
File being compiled and position: (8,1) in /home/dex/IdeaProjects/hashtest/src/main/java/main.kt
PsiElement: fun main(args: Array<String>) {
    val ct = GetterSetter()
    ct[3] += 3
}
The root cause was thrown at: Frame.java:1343
	at org.jetbrains.kotlin.codegen.FunctionCodegen.endVisit(FunctionCodegen.java:467)
	at org.jetbrains.kotlin.codegen.FunctionCodegen.generateMethod(FunctionCodegen.java:214)
	at org.jetbrains.kotlin.codegen.FunctionCodegen.generateMethod(FunctionCodegen.java:136)
	at org.jetbrains.kotlin.codegen.FunctionCodegen.gen(FunctionCodegen.java:110)
	at org.jetbrains.kotlin.codegen.MemberCodegen.genFunctionOrProperty(MemberCodegen.java:150)
	at org.jetbrains.kotlin.codegen.PackagePartCodegen.generateBody(PackagePartCodegen.java:66)
	at org.jetbrains.kotlin.codegen.MemberCodegen.generate(MemberCodegen.java:109)
	at org.jetbrains.kotlin.codegen.PackageCodegen.generate(PackageCodegen.java:325)
	at org.jetbrains.kotlin.codegen.PackageCodegen.generate(PackageCodegen.java:214)
	at org.jetbrains.kotlin.codegen.KotlinCodegenFacade.generatePackage(KotlinCodegenFacade.java:80)
	at org.jetbrains.kotlin.codegen.KotlinCodegenFacade.compileCorrectFiles(KotlinCodegenFacade.java:67)
	at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.generate(KotlinToJVMBytecodeCompiler.java:386)
	at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.compileModules(KotlinToJVMBytecodeCompiler.java:145)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.java:178)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.java:53)
	at org.jetbrains.kotlin.cli.common.CLICompiler.exec(CLICompiler.java:148)
	at org.jetbrains.kotlin.cli.common.CLICompiler.exec(CLICompiler.java:128)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execAndOutputXml(CLICompiler.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.jetbrains.kotlin.compilerRunner.CompilerRunnerUtil.invokeExecMethod(CompilerRunnerUtil.java:92)
	at org.jetbrains.kotlin.compilerRunner.KotlinCompilerRunner.execCompiler(KotlinCompilerRunner.java:119)
	at org.jetbrains.kotlin.compilerRunner.KotlinCompilerRunner.runCompiler(KotlinCompilerRunner.java:94)
	at org.jetbrains.kotlin.compilerRunner.KotlinCompilerRunner.runK2JvmCompiler(KotlinCompilerRunner.java:63)
	at org.jetbrains.kotlin.jps.build.KotlinBuilder.compileToJvm(KotlinBuilder.kt:466)
	at org.jetbrains.kotlin.jps.build.KotlinBuilder.doCompileModuleChunk(KotlinBuilder.kt:233)
	at org.jetbrains.kotlin.jps.build.KotlinBuilder.build(KotlinBuilder.kt:134)
	at org.jetbrains.jps.incremental.IncProjectBuilder.runModuleLevelBuilders(IncProjectBuilder.java:1196)
	at org.jetbrains.jps.incremental.IncProjectBuilder.runBuildersForChunk(IncProjectBuilder.java:877)
	at org.jetbrains.jps.incremental.IncProjectBuilder.buildTargetsChunk(IncProjectBuilder.java:945)
	at org.jetbrains.jps.incremental.IncProjectBuilder.buildChunkIfAffected(IncProjectBuilder.java:840)
	at org.jetbrains.jps.incremental.IncProjectBuilder.buildChunks(IncProjectBuilder.java:663)
	at org.jetbrains.jps.incremental.IncProjectBuilder.runBuild(IncProjectBuilder.java:370)
	at org.jetbrains.jps.incremental.IncProjectBuilder.build(IncProjectBuilder.java:191)
	at org.jetbrains.jps.cmdline.BuildRunner.runBuild(BuildRunner.java:137)
	at org.jetbrains.jps.cmdline.BuildSession.runBuild(BuildSession.java:293)
	at org.jetbrains.jps.cmdline.BuildSession.run(BuildSession.java:124)
	at org.jetbrains.jps.cmdline.BuildMain$MyMessageHandler$1.run(BuildMain.java:242)
	at org.jetbrains.jps.service.impl.SharedThreadPoolImpl$1.run(SharedThreadPoolImpl.java:41)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.NegativeArraySizeException
	at org.jetbrains.org.objectweb.asm.Frame.merge(Frame.java:1343)
	at org.jetbrains.org.objectweb.asm.MethodWriter.visitMaxs(MethodWriter.java:1475)
	at org.jetbrains.org.objectweb.asm.MethodVisitor.visitMaxs(MethodVisitor.java:866)
	at org.jetbrains.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:826)
	at org.jetbrains.kotlin.codegen.optimization.OptimizationMethodVisitor.visitEnd(OptimizationMethodVisitor.java:80)
	at org.jetbrains.kotlin.codegen.FunctionCodegen.endVisit(FunctionCodegen.java:460)
	... 45 more

If you change the Double, Double to String, String, then it leads to a VerifyError when a compilation is tried. You must also switch s to a string type. Also in this case, the regular gs[3] = gs[3] + 2 won't compile due to a type mismatch.

{code:lang=kotlin}
class GetSetter {
    var s = ""
    fun get(k: Int): Int = 0
    fun set(j: String, k: String) {
        s  = j
    }
}
fun main(args: Array<String>) {
   val gs = GetSetter()
    gs[3] += 2
}
{code}

Exception in thread "main" java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    _DefaultPackage$main$cdf54272.main([Ljava/lang/String;)V @25: invokevirtual
  Reason:
    Type 'java/lang/Integer' (current frame, stack[2]) is not assignable to 'java/lang/String'
  Current Frame:
    bci: @25
    flags: { }
    locals: { '[Ljava/lang/String;', 'GetterSetter' }
    stack: { 'GetterSetter', integer, 'java/lang/Integer' }
  Bytecode:
    0x0000000: 2a12 0bb8 0011 bb00 1359 b700 174c 2b06
    0x0000010: 5cb6 001b 0660 b800 21b6 0025 b1  