``` kotlin
public open class A {
    protected open class B
}

public open class C : A() {
    protected open class D {
        internal open class E : A.B() // False warning: subclass effective visibility 'protected & internal(C)' should be the same or less permissive than its superclass effective visibility 'protected(A)'
    }
}
```

`B` is "protected relative to `A`". `E` is not more visible than its container `D`, and `D` is "protected relative to `C`", that is strictly less visible than "protected relative to `A`" (because `A` is a superclass of `C`). So, `E` is less visible than its direct superclass `B`, as required.