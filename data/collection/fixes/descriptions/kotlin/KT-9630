Are extension functions between unions of types supported? e.g.

{code}
interface Foo<T>
interface Bar<T>

class Baz<T> : Foo<T>, Bar<T>

fun <T, FooBar : Foo<T>> FooBar.bip() where FooBar: Bar<T> {}

fun main(args: Array<String>) {
    val baz = Baz<String>()
    baz.bip() // Doesn't work
}
{code}

{{
Error:(10, 8) Unresolved reference. None of the following candidates is applicable because of receiver type mismatch: 
public fun &lt;T, FooBar : Foo&lt;kotlin.String&gt;&gt; Baz&lt;kotlin.String&gt;.bip(): kotlin.Unit where FooBar : Bar&lt;kotlin.String&gt; defined in root package
}}