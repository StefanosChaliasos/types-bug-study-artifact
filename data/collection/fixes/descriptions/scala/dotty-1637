Scalac can compile it. But dotc crashes.

$ cat abc.scala

```
object Main extends App {
  case class Foo(field: Option[String])
  val x: PartialFunction[Foo, Int] = { c =>
    c.field match {
      case Some(s) => 42
    }
  }
}
```

$ dotc abc.scala

```
exception while transforming {
  {
    def $anonfun(c: Main.Foo): Int =
      {
        c.field match
          {
            case Some.unapply[String](s @ _): Some[String] => 42
          }
      }
    closure($anonfun:PartialFunction[Main.Foo, Int])
  }
} of class class dotty.tools.dotc.ast.Trees$Block # 380
exception while transforming val x: PartialFunction[Main.Foo, Int] =
  {
    {
      def $anonfun(c: Main.Foo): Int =
        {
          c.field match
            {
              case Some.unapply[String](s @ _): Some[String] => 42
            }
        }
      closure($anonfun:PartialFunction[Main.Foo, Int])
    }
  } of class class dotty.tools.dotc.ast.Trees$ValDef # 381
exception while transforming () extends Object() with App {
  case class Foo(field: Option[String]) extends Object() with Product1[Option[String]] {
    val field: Option[String]
    def copy(field: Option[String]): Main.Foo = new Main.Foo(field)
    def copy$default$1: Option[String] @uncheckedVariance = Foo.this.field: Option[String] @uncheckedVariance
    def isDefined: Boolean = true
    def _1: Option[String] = this.field
    override def hashCode(): Int =
      {
        var acc: Int = -889275714
        acc = scala.runtime.Statics$#mix(acc, scala.runtime.Statics$#anyHash(Foo.this.field))
        scala.runtime.Statics$#finalizeHash(acc, 1)
      }
    override def equals(x$0: Any): Boolean =
      this.eq(x$0.asInstanceOf[Object]).||(
        x$0 match
          {
            case x$0 @ _: Main.Foo => this.field.==(x$0.field)
            case _: Any => false
          }
      )
    override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
    override def canEqual(that: Any): Boolean = that.isInstanceOf[Main.Foo]
    override def productPrefix: String = "Foo"
  }
  final lazy module val Foo: Main.Foo$ = new Main.Foo$()
  final module class Foo$() extends Object() with (Option[String] => Main.Foo) {
    def apply(field: Option[String]): Main.Foo = new Main.Foo(field)
    def unapply(x$1: Main.Foo): Main.Foo = x$1
  }
  val x: PartialFunction[Main.Foo, Int] =
    {
      {
        def $anonfun(c: Main.Foo): Int =
          {
            c.field match
              {
                case Some.unapply[String](s @ _): Some[String] => 42
              }
          }
        closure($anonfun:PartialFunction[Main.Foo, Int])
      }
    }
} of class class dotty.tools.dotc.ast.Trees$Template # 383
exception while transforming @scala.annotation.internal.SourceFile("abc.scala") final module class Main$() extends Object() with App {
  case class Foo(field: Option[String]) extends Object() with Product1[Option[String]] {
    val field: Option[String]
    def copy(field: Option[String]): Main.Foo = new Main.Foo(field)
    def copy$default$1: Option[String] @uncheckedVariance = Foo.this.field: Option[String] @uncheckedVariance
    def isDefined: Boolean = true
    def _1: Option[String] = this.field
    override def hashCode(): Int =
      {
        var acc: Int = -889275714
        acc = scala.runtime.Statics$#mix(acc, scala.runtime.Statics$#anyHash(Foo.this.field))
        scala.runtime.Statics$#finalizeHash(acc, 1)
      }
    override def equals(x$0: Any): Boolean =
      this.eq(x$0.asInstanceOf[Object]).||(
        x$0 match
          {
            case x$0 @ _: Main.Foo => this.field.==(x$0.field)
            case _: Any => false
          }
      )
    override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
    override def canEqual(that: Any): Boolean = that.isInstanceOf[Main.Foo]
    override def productPrefix: String = "Foo"
  }
  final lazy module val Foo: Main.Foo$ = new Main.Foo$()
  final module class Foo$() extends Object() with (Option[String] => Main.Foo) {
    def apply(field: Option[String]): Main.Foo = new Main.Foo(field)
    def unapply(x$1: Main.Foo): Main.Foo = x$1
  }
  val x: PartialFunction[Main.Foo, Int] =
    {
      {
        def $anonfun(c: Main.Foo): Int =
          {
            c.field match
              {
                case Some.unapply[String](s @ _): Some[String] => 42
              }
          }
        closure($anonfun:PartialFunction[Main.Foo, Int])
      }
    }
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 384
exception while transforming package <empty> {
  final lazy module val Main: Main$ = new Main$()
  @scala.annotation.internal.SourceFile("abc.scala") final module class Main$() extends Object() with App {
    case class Foo(field: Option[String]) extends Object() with Product1[Option[String]] {
      val field: Option[String]
      def copy(field: Option[String]): Main.Foo = new Main.Foo(field)
      def copy$default$1: Option[String] @uncheckedVariance = Foo.this.field: Option[String] @uncheckedVariance
      def isDefined: Boolean = true
      def _1: Option[String] = this.field
      override def hashCode(): Int =
        {
          var acc: Int = -889275714
          acc = scala.runtime.Statics$#mix(acc, scala.runtime.Statics$#anyHash(Foo.this.field))
          scala.runtime.Statics$#finalizeHash(acc, 1)
        }
      override def equals(x$0: Any): Boolean =
        this.eq(x$0.asInstanceOf[Object]).||(
          x$0 match
            {
              case x$0 @ _: Main.Foo => this.field.==(x$0.field)
              case _: Any => false
            }
        )
      override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
      override def canEqual(that: Any): Boolean = that.isInstanceOf[Main.Foo]
      override def productPrefix: String = "Foo"
    }
    final lazy module val Foo: Main.Foo$ = new Main.Foo$()
    final module class Foo$() extends Object() with (Option[String] => Main.Foo) {
      def apply(field: Option[String]): Main.Foo = new Main.Foo(field)
      def unapply(x$1: Main.Foo): Main.Foo = x$1
    }
    val x: PartialFunction[Main.Foo, Int] =
      {
        {
          def $anonfun(c: Main.Foo): Int =
            {
              c.field match
                {
                  case Some.unapply[String](s @ _): Some[String] => 42
                }
            }
          closure($anonfun:PartialFunction[Main.Foo, Int])
        }
      }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 385

exception occurred while compiling abc.scala
Exception in thread "main" dotty.tools.dotc.core.Denotations$NotDefinedHere: demanding denotation of class $anonfun at phase checkStatic(9) outside defined interval: defined periods are Period(13..14, run = 2)
    at dotty.tools.dotc.core.Denotations$SingleDenotation.currentNoDefinedHere(Denotations.scala:858)
    at dotty.tools.dotc.core.Denotations$SingleDenotation.current(Denotations.scala:851)
    at dotty.tools.dotc.core.Types$NamedType.computeDenot(Types.scala:1434)
    at dotty.tools.dotc.core.Types$NamedType.denotAt(Types.scala:1418)
    at dotty.tools.dotc.core.Types$NamedType.denot(Types.scala:1406)
    at dotty.tools.dotc.core.Types$NamedType.symbol(Types.scala:1592)
    at dotty.tools.dotc.typer.TypeAssigner$$anon$2$$anonfun$toAvoid$1.apply(TypeAssigner.scala:59)
    at dotty.tools.dotc.typer.TypeAssigner$$anon$2$$anonfun$toAvoid$1.apply(TypeAssigner.scala:58)
    at dotty.tools.dotc.core.Types$ExistsAccumulator.apply(Types.scala:3707)
    at dotty.tools.dotc.core.Types$Type.existsPart(Types.scala:225)
    at dotty.tools.dotc.typer.TypeAssigner$$anon$2.toAvoid(TypeAssigner.scala:58)
    at dotty.tools.dotc.typer.TypeAssigner$$anon$2.apply(TypeAssigner.scala:69)
    at dotty.tools.dotc.typer.TypeAssigner$class.avoid(TypeAssigner.scala:129)
    at dotty.tools.dotc.typer.Typer.avoid(Typer.scala:62)
    at dotty.tools.dotc.typer.TypeAssigner$class.avoidingType(TypeAssigner.scala:133)
    at dotty.tools.dotc.typer.Typer.avoidingType(Typer.scala:62)
    at dotty.tools.dotc.typer.TypeAssigner$class.assignType(TypeAssigner.scala:391)
    at dotty.tools.dotc.typer.Typer.assignType(Typer.scala:62)
    at dotty.tools.dotc.ast.tpd$TypedTreeCopier.Block(tpd.scala:499)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer.transformUnnamed(TreeTransform.scala:1048)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer$$anonfun$transform$2.apply(TreeTransform.scala:1182)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer$$anonfun$transform$2.apply(TreeTransform.scala:1174)
    at dotty.tools.dotc.reporting.Reporting$class.traceIndented(Reporter.scala:132)
    at dotty.tools.dotc.core.Contexts$Context.traceIndented(Contexts.scala:57)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer.transform(TreeTransform.scala:1173)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer.transformNamed(TreeTransform.scala:961)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer$$anonfun$transform$2.apply(TreeTransform.scala:1181)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer$$anonfun$transform$2.apply(TreeTransform.scala:1174)
    at dotty.tools.dotc.reporting.Reporting$class.traceIndented(Reporter.scala:132)
    at dotty.tools.dotc.core.Contexts$Context.traceIndented(Contexts.scala:57)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer.transform(TreeTransform.scala:1173)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer.dotty$tools$dotc$transform$TreeTransforms$TreeTransformer$$transformStat$1(TreeTransform.scala:1207)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer$$anonfun$37.apply(TreeTransform.scala:1211)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer$$anonfun$37.apply(TreeTransform.scala:1211)
    at dotty.tools.dotc.core.Decorators$ListDecorator$.loop$1(Decorators.scala:52)
    at dotty.tools.dotc.core.Decorators$ListDecorator$.mapconserve$extension(Decorators.scala:68)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer.transformStats(TreeTransform.scala:1211)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer.transformUnnamed(TreeTransform.scala:1152)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer$$anonfun$transform$2.apply(TreeTransform.scala:1182)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer$$anonfun$transform$2.apply(TreeTransform.scala:1174)
    at dotty.tools.dotc.reporting.Reporting$class.traceIndented(Reporter.scala:132)
    at dotty.tools.dotc.core.Contexts$Context.traceIndented(Contexts.scala:57)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer.transform(TreeTransform.scala:1173)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer.transformNamed(TreeTransform.scala:979)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer$$anonfun$transform$2.apply(TreeTransform.scala:1181)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer$$anonfun$transform$2.apply(TreeTransform.scala:1174)
    at dotty.tools.dotc.reporting.Reporting$class.traceIndented(Reporter.scala:132)
    at dotty.tools.dotc.core.Contexts$Context.traceIndented(Contexts.scala:57)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer.transform(TreeTransform.scala:1173)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer.dotty$tools$dotc$transform$TreeTransforms$TreeTransformer$$transformStat$1(TreeTransform.scala:1207)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer$$anonfun$37.apply(TreeTransform.scala:1211)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer$$anonfun$37.apply(TreeTransform.scala:1211)
    at dotty.tools.dotc.core.Decorators$ListDecorator$.loop$1(Decorators.scala:52)
    at dotty.tools.dotc.core.Decorators$ListDecorator$.mapconserve$extension(Decorators.scala:68)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer.transformStats(TreeTransform.scala:1211)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer.transformUnnamed(TreeTransform.scala:1161)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer$$anonfun$transform$2.apply(TreeTransform.scala:1182)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer$$anonfun$transform$2.apply(TreeTransform.scala:1174)
    at dotty.tools.dotc.reporting.Reporting$class.traceIndented(Reporter.scala:132)
    at dotty.tools.dotc.core.Contexts$Context.traceIndented(Contexts.scala:57)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer.transform(TreeTransform.scala:1173)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer.macroTransform(TreeTransform.scala:551)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer.run(TreeTransform.scala:469)
    at dotty.tools.dotc.core.Phases$Phase$$anonfun$runOn$1.apply(Phases.scala:276)
    at dotty.tools.dotc.core.Phases$Phase$$anonfun$runOn$1.apply(Phases.scala:274)
    at scala.collection.immutable.List.map(List.scala:273)
    at dotty.tools.dotc.core.Phases$Phase$class.runOn(Phases.scala:274)
    at dotty.tools.dotc.transform.TreeTransforms$TreeTransformer.runOn(TreeTransform.scala:463)
    at dotty.tools.dotc.Run$$anonfun$compileUnits$1$$anonfun$apply$mcV$sp$1.apply(Run.scala:75)
    at dotty.tools.dotc.Run$$anonfun$compileUnits$1$$anonfun$apply$mcV$sp$1.apply(Run.scala:72)
    at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
    at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:186)
    at dotty.tools.dotc.Run$$anonfun$compileUnits$1.apply$mcV$sp(Run.scala:72)
    at dotty.tools.dotc.Run$$anonfun$compileUnits$1.apply(Run.scala:66)
    at dotty.tools.dotc.Run$$anonfun$compileUnits$1.apply(Run.scala:66)
    at dotty.tools.dotc.util.Stats$.monitorHeartBeat(Stats.scala:76)
    at dotty.tools.dotc.Run.compileUnits(Run.scala:66)
    at dotty.tools.dotc.Run.compileSources(Run.scala:63)
    at dotty.tools.dotc.Run.compile(Run.scala:47)
    at dotty.tools.dotc.Driver.doCompile(Driver.scala:26)
    at dotty.tools.dotc.Driver.process(Driver.scala:124)
    at dotty.tools.dotc.Driver.process(Driver.scala:93)
    at dotty.tools.dotc.Driver.process(Driver.scala:105)
    at dotty.tools.dotc.Driver.main(Driver.scala:132)
    at dotty.tools.dotc.Main.main(Main.scala)
```
