scalac can compile but dotc crashes.


$ cat abc.scala
```
case class B[T](b: List[Int]) {
  var s: B[Int] = _
  s copy ()
}
```

$ dotc abc.scala
```
error while pickling type T
error when pickling type T
error when pickling tree T
error when pickling tree $1$.copy[T]
error when pickling tree $1$.copy[T]($1$.copy$default$1[T])
error when pickling tree {
  val $1$: B[Int] = this.s
  $1$.copy[T]($1$.copy$default$1[T])
}
error when pickling tree [T](b: List[Int]) extends Object() with _root_.scala.Product1[List[Int]] {
  T
  private[this] type T = T
  val b: scala.collection.immutable.List[Int]
  var s: B[Int] = _
  <accessor> def s_=(x$1: B[Int]): Unit = ()
  {
    val $1$: B[Int] = this.s
    $1$.copy[T]($1$.copy$default$1[T])
  }
  def copy[T](b: scala.collection.immutable.List[Int]): B[T] = new B[T](b)
  def copy$default$1[T]: scala.collection.immutable.List[Int] @uncheckedVariance
     =
  B.this.b: scala.collection.immutable.List[Int] @uncheckedVariance
  def isDefined: Boolean = true
  def _1: scala.collection.immutable.List[Int] = this.b
  override def hashCode(): Int =
    {
      var acc: Int = -889275714
      acc =
        scala.runtime.Statics$#mix(acc, scala.runtime.Statics$#anyHash(B.this.b)
          )
      scala.runtime.Statics$#finalizeHash(acc, 1)
    }
  override def equals(x$0: Any): Boolean =
    this.eq(x$0.asInstanceOf[Object]).||(
      x$0 match
        {
          case x$0 @ _: B => this.b.==(x$0.b)
          case _: Any => false
        }
    )
  override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
  override def canEqual(that: Any): Boolean = that.isInstanceOf[B]
  override def productPrefix: String = "B"
}
error when pickling tree @scala.annotation.internal.SourceFile("abc.scala") case class B[T](b: List[Int])
   extends
 Object() with _root_.scala.Product1[List[Int]] {
  type T
  private[this] type T = T
  val b: scala.collection.immutable.List[Int]
  var s: B[Int] = _
  <accessor> def s_=(x$1: B[Int]): Unit = ()
  {
    val $1$: B[Int] = this.s
    $1$.copy[T]($1$.copy$default$1[T])
  }
  def copy[T](b: scala.collection.immutable.List[Int]): B[T] = new B[T](b)
  def copy$default$1[T]: scala.collection.immutable.List[Int] @uncheckedVariance
     =
  B.this.b: scala.collection.immutable.List[Int] @uncheckedVariance
  def isDefined: Boolean = true
  def _1: scala.collection.immutable.List[Int] = this.b
  override def hashCode(): Int =
    {
      var acc: Int = -889275714
      acc =
        scala.runtime.Statics$#mix(acc, scala.runtime.Statics$#anyHash(B.this.b)
          )
      scala.runtime.Statics$#finalizeHash(acc, 1)
    }
  override def equals(x$0: Any): Boolean =
    this.eq(x$0.asInstanceOf[Object]).||(
      x$0 match
        {
          case x$0 @ _: B => this.b.==(x$0.b)
          case _: Any => false
        }
    )
  override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
  override def canEqual(that: Any): Boolean = that.isInstanceOf[B]
  override def productPrefix: String = "B"
}
error when pickling tree package <empty> {
  @scala.annotation.internal.SourceFile("abc.scala") case class B[T](
    b: List[Int]
  ) extends Object() with _root_.scala.Product1[List[Int]] {
    type T
    private[this] type T = T
    val b: scala.collection.immutable.List[Int]
    var s: B[Int] = _
    <accessor> def s_=(x$1: B[Int]): Unit = ()
    {
      val $1$: B[Int] = this.s
      $1$.copy[T]($1$.copy$default$1[T])
    }
    def copy[T](b: scala.collection.immutable.List[Int]): B[T] = new B[T](b)
    def copy$default$1[T]:
      scala.collection.immutable.List[Int] @uncheckedVariance
     = B.this.b: scala.collection.immutable.List[Int] @uncheckedVariance
    def isDefined: Boolean = true
    def _1: scala.collection.immutable.List[Int] = this.b
    override def hashCode(): Int =
      {
        var acc: Int = -889275714
        acc =
          scala.runtime.Statics$#mix(acc,
            scala.runtime.Statics$#anyHash(B.this.b)
          )
        scala.runtime.Statics$#finalizeHash(acc, 1)
      }
    override def equals(x$0: Any): Boolean =
      this.eq(x$0.asInstanceOf[Object]).||(
        x$0 match
          {
            case x$0 @ _: B => this.b.==(x$0.b)
            case _: Any => false
          }
      )
    override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
    override def canEqual(that: Any): Boolean = that.isInstanceOf[B]
    override def productPrefix: String = "B"
  }
  final lazy module val B: B$ = new B$()
  @scala.annotation.internal.SourceFile("abc.scala") final module class B$()
     extends
   Object() { this: B.type =>
    def apply[T](b: scala.collection.immutable.List[Int]): B[T] = new B[T](b)
    def unapply[T](x$1: B[T]): B[T] = x$1
  }
}

exception occurred while compiling abc.scala
Exception in thread "main" java.lang.AssertionError: assertion failed: orphan poly parameter: PolyParam(T)
	at scala.Predef$.assert(Predef.scala:165)
	at dotty.tools.dotc.core.tasty.TreePickler.pickleNewType(TreePickler.scala:269)
	at dotty.tools.dotc.core.tasty.TreePickler.pickleType(TreePickler.scala:145)
	at dotty.tools.dotc.core.tasty.TreePickler.pickleTree(TreePickler.scala:530)
	at dotty.tools.dotc.core.tasty.TreePickler.pickleTpt(TreePickler.scala:305)
	at dotty.tools.dotc.core.tasty.TreePickler$$anonfun$pickleTree$2$$anonfun$apply$mcV$sp$4.apply(TreePickler.scala:390)
	at dotty.tools.dotc.core.tasty.TreePickler$$anonfun$pickleTree$2$$anonfun$apply$mcV$sp$4.apply(TreePickler.scala:390)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at dotty.tools.dotc.core.tasty.TreePickler$$anonfun$pickleTree$2.apply$mcV$sp(TreePickler.scala:390)
	at dotty.tools.dotc.core.tasty.TreePickler.dotty$tools$dotc$core$tasty$TreePickler$$withLength(TreePickler.scala:30)
	at dotty.tools.dotc.core.tasty.TreePickler.pickleTree(TreePickler.scala:388)
<snipped>
```