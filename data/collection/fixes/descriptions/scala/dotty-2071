Discovered by @rinfield:

```scala
object Test {
  type PF[A, B] = PartialFunction[A, B]

  val f: PF[Int, String] = {
    case i => "bar"
  }
}
```

Fails with:

```scala
-- Error: local/pf.scala -------------------------------------------------------
5 |    case i: Int => "bar"
  |    ^
  |    missing parameter type for parameter x$1 of expanded function x$1 =>
  |      x$1 @unchecked match
  |        {
  |          case i: Int =>
  |            "bar"
  |        }, expected = Test.PF[Int, String]
```

Works fine when the proper variance added.