```scala
object hlists {
  sealed abstract class HList {
    type Merge[L <: HList] <: HList
    
    def merge[L <: HList](l: L): Merge[L]
  }
  final case class HCons[H, T <: HList](head : H, tail : T) extends HList {
    type Merge[L <: HList] = HCons[H, tail.Merge[L]]
    
    def merge[L <: HList](l: L): Merge[L] = HCons(head, tail.merge(l))
  }
  sealed trait HNil extends HList {
    type Merge[L <: HList] = L
    
    def merge[L <: HList](l: L): Merge[L] = l
  }
  final val HNil: HNil = { case object HNil extends HNil; HNil }
}

import hlists._

val merged: HCons[Int,HCons[String,HNil]] = HCons(42, HNil) merge HCons("foo", HNil)
```

Pasted in the Scala 2.12.2 REPL this gives:
```scala
merged: hlists.HCons[Int,hlists.HCons[String,hlists.HNil]] = HCons(42,HCons(foo,HNil))
```

Pasted in the Dotty REPL:
```scala
-- [E007] Type Mismatch Error: <console>:8:60 ----------------------------------
8 |val merged: HCons[Int,HCons[String,HNil]] = HCons(42, HNil) merge HCons("foo", HNil)
  |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |found:    hlists.HCons[H, T]#Merge[L]
  |required: hlists.HCons[Int, hlists.HCons[String, hlists.HNil]]
  |
  |where:    H is a type variable with constraint >: Int(42)
  |          L is a type variable with constraint >: hlists.HCons[H, T] and <: hlists.HList
  |          T is a type variable with constraint >: hlists.HNil(hlists.HNil) and <: hlists.HList
```

Without the explicit type annotation in Scala:
```scala
scala> HCons(42, HNil) merge HCons("foo", HNil)
res0: hlists.HCons[Int,hlists.HCons[String,hlists.HNil]] = HCons(42,HCons(foo,HNil))
```

Without the explicit type annotation in Dotty:
```scala
scala> HCons(42, HNil) merge HCons("foo", HNil) 
val res0: hlists.HCons[Int, hlists.HNil]#Merge[hlists.HCons[String, hlists.HNil]] = HCons(42,HCons(foo,HNil))
```

The strange part (to me at least) is that Dotty does seem to know that those types are equal:
```scala
scala> implicitly[HCons[Int,HNil]#Merge[HCons[String,HNil]] =:= HCons[Int,HCons[String,HNil]]] 
val res2: =:=[hlists.HCons[Int, hlists.HNil]#Merge[hlists.HCons[String, hlists.HNil]], 
  hlists.HCons[Int, hlists.HCons[String, hlists.HNil]]
] = <function1>
```