```Scala
class Outer(x: Int) {
  class Inner(y: Int) {
  }
}
object Test {
  def outer = Outer(1)
  
  outer.Inner(2) // error: value Inner is not a member of Outer
  new outer.Inner(2) // error: (Test.outer : => Outer) is not stable
}
```
The error message when using the creator application syntax is unhelpful, one has to know about `new` to find the real problem. It'd be better if the error also mentioned the unstable prefix, it'd be even nicer if the message explained how to solve the problem (Scala beginners don't know what "stable" means). But we could just avoid the error in the first place by having the compiler stabilize the prefix itself. Forcing the user to do it manually doesn't seem particularly useful, and it makes for weird-looking code ("why did you create a val that is used only once here ?").