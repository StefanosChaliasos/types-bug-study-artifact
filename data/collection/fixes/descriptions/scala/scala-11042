```scala
trait Base[+A] {
  def get: A = null.asInstanceOf[A]
}

trait SubBase extends Base[Any] {
  override def get: Any = ""
}

class Hi extends Base[Int] with SubBase

object Test {
  def main(args: Array[String]): Unit = {
    val hi = new Hi
    val base: Base[Int] = hi
    val y: Int = base.get // ClassCastException: java.lang.String cannot be cast to java.lang.Integer
    println(y)
  }
}
```
If we make `get` in `Base` abstract, we get an error as expected:
```scala
opt.scala:9: error: overriding method get in trait Base of type => Int;
 method get in trait SubBase of type => Any has incompatible type
class Hi extends Base[Int] with SubBase
      ^
one error found
```
Dotty always produces an error:
```scala
-- Error: try/opt.scala:9:6 ----------------------------------------------------
9 |class Hi extends Base[Int] with SubBase
  |      ^
  |method get in trait SubBase is not a legal implementation of `get` in class Hi
  |  its type             => Any
  |  does not conform to  => Int
one error found
```

This is somewhat important since it affects the design of the collections, see https://github.com/lampepfl/dotty/issues/4839