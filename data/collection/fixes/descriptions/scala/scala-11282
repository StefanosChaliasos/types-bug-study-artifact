On highly illegal code, so not that big of a deal.

```
scala> class X[T] ; object X { def instance[T] = new X[T] }
defined class X
defined object X

scala> X.instance().asInstanceOf[scala.AnyRef]
<console>:13: error: X[T] does not take parameters
       X.instance().asInstanceOf[scala.AnyRef]
                 ^
java.lang.AssertionError: assertion failed:
  Context(<console>) {
   owner       = value res0
   tree        = ValDef:private[this] val res0 = X.instance().<asInstanceOf: error>[scala.AnyR
   scope       = 0 decls
   contextMode = AmbiguousErrors MacrosEnabled TypeConstructorAllowed
   outer.owner = object $iw
}
     while compiling: <console>
        during phase: globalPhase=typer, enteringPhase=namer
     library version: version 2.12.7
    compiler version: version 2.12.7
  reconstructed args: -deprecation -feature -usejavacp

  last tree to typer: Ident(scala)
       tree position: line 13 of <console>
            tree tpe: scala.type
              symbol: final package scala
   symbol definition: final package scala (a ModuleSymbol)
      symbol package: <none>
       symbol owners: package scala
           call site: object $iw in package $line41

== Source file context for tree position ==

    10 object $iw {
    11
    12 val res0 =
    13 X.instance().asInstanceOf[scala.AnyRef]
    14
    15 }
    16 }
	at scala.reflect.internal.SymbolTable.throwAssertionError(SymbolTable.scala:163)
	at scala.tools.nsc.typechecker.Typers$Typer.vanillaAdapt$1(Typers.scala:1169)
	at scala.tools.nsc.typechecker.Typers$Typer.adapt(Typers.scala:1223)
	at scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:5631)
	at scala.tools.nsc.typechecker.Typers$Typer.$anonfun$typed1$60(Typers.scala:5033)
```