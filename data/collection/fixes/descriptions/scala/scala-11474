I have the following Java code, this is a simplified version of a class hierarchy from `protobuf-java`:

```
package foo;

public class Outer {
    public interface BaseBuilder { }

    public abstract static class Container<B> { }

    public abstract static class Builder<
          M extends Container<B>,
          B extends Builder<M, B>>
      implements BaseBuilder { }

    public abstract static class Builder1<T extends Builder1<T>>
            extends Builder { }

    public abstract class Builder2 extends Builder1<Builder2> { }

    interface MyBase {
        BaseBuilder newBuilder();
    }

    public static abstract class M1 implements MyBase  {
        public Outer.Builder2 newBuilder() { return null; }
    }

    public static abstract class M2 implements MyBase {
        public Builder newBuilder() { return null; }
    }
}
```

And this scala code that references it:
```
package foo;

object O {
  Seq(
    new Outer.M2 {},
    new Outer.M1 {} 
  )
}
```

The following gets the compiler to go into infinite recursion into:

```
[error] java.lang.StackOverflowError
[error]      at scala.collection.mutable.HashMap.apply(HashMap.scala:84)
[error]      at scala.reflect.internal.tpe.TypeMaps$ExistentialExtrapolation.$anonfun$countOccs$1(TypeMaps.scala:317)
[error]      at scala.reflect.internal.tpe.TypeMaps$ExistentialExtrapolation.$anonfun$countOccs$1$adapted(TypeMaps.scala:314)
[error]      at scala.reflect.internal.tpe.TypeMaps$ForEachTypeTraverser.traverse(TypeMaps.scala:1097)
[error]      at scala.reflect.internal.tpe.TypeMaps$TypeTraverser.apply(TypeMaps.scala:257)
[error]      at scala.reflect.internal.tpe.TypeMaps$TypeTraverser.apply(TypeMaps.scala:255)
[error]      at scala.reflect.internal.Types$TypeRef.mapOver(Types.scala:2353)
[error]      at scala.reflect.internal.tpe.TypeMaps$ForEachTypeTraverser.traverse(TypeMaps.scala:1098)
[error]      at scala.reflect.internal.tpe.TypeMaps$TypeTraverser.apply(TypeMaps.scala:257)
[error]      at scala.reflect.internal.Types$TypeBounds.mapOver(Types.scala:1569)
[error]      at scala.reflect.internal.tpe.TypeMaps$ForEachTypeTraverser.traverse(TypeMaps.scala:1098)
[error]      at scala.reflect.internal.tpe.TypeMaps$TypeTraverser.apply(TypeMaps.scala:257)
[error]      at scala.reflect.internal.tpe.TypeMaps$TypeMap.applyToSymbolInfo(TypeMaps.scala:122)
[error]      at scala.reflect.internal.tpe.TypeMaps$TypeMap.loop$1(TypeMaps.scala:116)
[error]      at scala.reflect.internal.tpe.TypeMaps$TypeMap.firstChangedSymbol(TypeMaps.scala:120)
[error]      at scala.reflect.internal.tpe.TypeMaps$TypeMap.mapOver(TypeMaps.scala:134)
[error]      at scala.reflect.internal.Types$ExistentialType.mapOver(Types.scala:3165)
[error]      at scala.reflect.internal.tpe.TypeMaps$ForEachTypeTraverser.traverse(TypeMaps.scala:1098)
[error]      at scala.reflect.internal.Types$Type.foreach(Types.scala:793)
[error]      at scala.reflect.internal.tpe.TypeMaps$ExistentialExtrapolation.countOccs(TypeMaps.scala:314)
[error]      at scala.reflect.internal.tpe.TypeMaps$ExistentialExtrapolation.extrapolate(TypeMaps.scala:323)
[error]      at scala.reflect.internal.Types.existentialAbstraction(Types.scala:4211)
[error]      at scala.reflect.internal.Types.existentialAbstraction$(Types.scala:4165)
[error]      at scala.reflect.internal.SymbolTable.existentialAbstraction(SymbolTable.scala:28)
[error]      at scala.reflect.internal.Types$TypeVar.$anonfun$registerBound$7(Types.scala:3640)
[error]      at scala.reflect.internal.ExistentialsAndSkolems.existentialTransform(ExistentialsAndSkolems.scala:116)
[error]      at scala.reflect.internal.ExistentialsAndSkolems.existentialTransform$(ExistentialsAndSkolems.scala:95)
[error]      at scala.reflect.internal.Types$TypeVar.registerBound(Types.scala:3640)
[error]      at scala.reflect.internal.Types$TypeVar.registerBound(Types.scala:3641)
[error]      at scala.reflect.internal.Types$TypeVar.registerBound(Types.scala:3641)
[error]      at scala.reflect.internal.Types$TypeVar.registerBound(Types.scala:3641)
[error]      at scala.reflect.internal.Types$TypeVar.registerBound(Types.scala:3641)
[error]      at scala.reflect.internal.Types$TypeVar.registerBound(Types.scala:3641)
[error]      at scala.reflect.internal.Types$TypeVar.registerBound(Types.scala:3641)
[error]      at scala.reflect.internal.Types$TypeVar.registerBound(Types.scala:3641)
[error]      at scala.reflect.internal.Types$TypeVar.registerBound(Types.scala:3641)
[error]      at scala.reflect.internal.Types$TypeVar.registerBound(Types.scala:3641)
...
```

This happens when I compile `JavaThenScala` on 2.13.0-M5 and beyond (including the latest nightly 2.13.0-pre-63769af), but works correctly in 2.12.x.

For context, I encountered this bug in ScalaPB unit tests. The Java code is simplified protobuf-java code and `M1` and `M2` code generated by the Java protobuf generator. The Scala code is pretty trivial, so I assume this may be an issue for any Java protobuf users who work with Scala (regardless of whether they use ScalaPB).

For convenience, I created a mininal repo that reproduces this problem at https://github.com/thesamet/scalac-stackoverflow