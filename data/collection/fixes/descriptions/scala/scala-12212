using Scala 2.13.3,

```scala
trait Low[X]
trait Lower[V, X] extends Low[X]
trait Res[V]
trait High[L[X] <: Low[X]]
trait HighRes[L[X] <: Lower[V, X], V] extends Res[V]

trait Mid[X, Y]

def m[L[X] <: Lower[V, X], V](high :High[L]) :HighRes[L, V] = ???

def m[X, Y](mid :Mid[X, Y]) :Res[Y] = ???

def ok[L[X] <: Lower[V, X], V](high :High[L]) :HighRes[L, V] =
    m(high)

def wtf[L[X] <: Lower[V, X], V](high :High[L]) :HighRes[L, V] =
    m[L, V](high)
```
## problem

```
C:\slang\src\test\scala\Playground.scala:51
kinds of the type arguments (L,V) do not conform to the expected kinds of the type parameters (type X,type Y).
L's type parameters do not match type X's expected parameters:
type L has 1 type parameter, but type X has 0
        m[L, V](high)
```

I admit I do not fully understand overload resolution rules - maybe it is all according to SLS. If so, it is extremely unfortunate, as in slightly more complex scenarios (for example involving PDTs), the inferer will fail, leaving no way of picking the correct overload.