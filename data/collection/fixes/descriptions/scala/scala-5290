If you run the scala REPL with -optimize in 2.9.1, then case classes don't auto-generate the productIterator method and calling it (or toString, eg) will causes an AbstractMethodError. This does NOT happen in 2.9.0 and 2.8.x. Reproducing:

$ scala -optimize
scala> case class A(x: Int)
scala> A(1).productIterator
java.lang.AbstractMethodError: A.productIterator()Lscala/collection/Iterator;
	at .<init>(<console>:10)
	at .<clinit>(<console>)
	at .<init>(<console>:11)
	at .<clinit>(<console>)
	at $print(<console>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at scala.tools.nsc.interpreter.IMain$ReadEvalPrint.call(IMain.scala:704)
	at scala.tools.nsc.interpreter.IMain$Request$$anonfun$14.apply(IMain.scala:920)
	at scala.tools.nsc.interpreter.Line$$anonfun$1.apply$mcV$sp(Line.scala:43)
	at scala.tools.nsc.io.package$$anon$2.run(package.scala:25)
	at java.lang.Thread.run(Thread.java:680)

Just doing `A(1)` by itself will also cause an exception, since scala.runtime.ScalaRuntime$._toString uses productIterator. This also happens when using sbt> console w/ "-optimize" as a "scalacOption", which is where I first noticed it, since I would've never run the REPL with -optimize otherwise.