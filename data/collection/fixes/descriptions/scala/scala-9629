description:
I was triying to create a pattern matching for an empty array and i got a weird error.

I am trying to implement the mergesort for academic purpouses because i am a beginer in this language.

I want to split recursively until a vector is empty (in a scala way without if or else using pattern matching)

steps to reproduce
1- try to compile the code in attachements
2- doesnt compile with errors.

code: in attachements

output:

mergesort.scala:9: error: unsupported pattern: TypeTree / p2: Array[Nothing] (binder: Array[Int]) @ Array[Nothing] (this is a scalac bug.)
      case (Array[Nothing],Array[Nothing]) => Array()
                 ^
error: unsupported pattern: TypeTree / p3: Array[Nothing] (binder: Array[Int]) @ Array[Nothing] (this is a scalac bug.)
      case (Array[Nothing],Array[Nothing]) => Array()
                                ^
error: unsupported pattern: TypeTree / p4: Array[Nothing] (binder: Array[Int]) @ Array[Nothing] (this is a scalac bug.)
      case (Array[Nothing],divideB) => mergesort(divideB)  //I think this only happens at very end when only 1 element merge not needed
                 ^
error: unsupported pattern: TypeTree / p5: Array[Nothing] (binder: Array[Int]) @ Array[Nothing] (this is a scalac bug.)
      case (divideA,Array[Nothing]) => mergesort(divideA)  //the same as above
                         ^
warning: unreachable code
      case (Array[Nothing],divideB) => mergesort(divideB)  //I think this only happens at very end when only 1 element merge not needed
                                                ^
one warning found
four errors found

sorry for the inconveniences, i am a beginner in this language but i want to know why is powerfull.