diff --git a/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java b/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java
index 5f804bd4c6..035a455e75 100644
--- a/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java
+++ b/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java
@@ -51,6 +51,32 @@ abstract class StaticTypeCheckingSupport {
                 put(ClassHelper.Double_TYPE, 5);
             }});
 
+    /**
+     * This comparator is used when we return the list of methods from DGM which name correspond to a given
+     * name. As we also lookup for DGM methods of superclasses or interfaces, it may be possible to find
+     * two methods which have the same name and the same arguments. In that case, we should not add the method
+     * from superclass or interface otherwise the system won't be able to select the correct method, resulting
+     * in an ambiguous method selection for similar methods.
+     */
+    private static final Comparator<MethodNode> DGM_METHOD_NODE_COMPARATOR = new Comparator<MethodNode>() {
+        public int compare(final MethodNode o1, final MethodNode o2) {
+            if (o1.getName().equals(o2.getName())) {
+                Parameter[] o1ps = o1.getParameters();
+                Parameter[] o2ps = o2.getParameters();
+                if (o1ps.length == o2ps.length) {
+                    boolean allEqual = true;
+                    for (int i = 0; i < o1ps.length && allEqual; i++) {
+                        allEqual = o1ps[i].getType().equals(o2ps[i].getType());
+                    }
+                    if (allEqual) return 0;
+                } else {
+                    return o1ps.length - o2ps.length;
+                }
+            }
+            return 1;
+        }
+    };
+
     /**
      * Returns true for expressions of the form x[...]
      * @param expression an expression
@@ -127,25 +153,28 @@ abstract class StaticTypeCheckingSupport {
         return methods;
     }
 
-    /**
-     * Returns a list of method nodes corresponding to DGM methods for this classnode.
-     * @param clazz the class for which to return method nodes
-     * @return the list of methods defined in DGM
-     */
-    static Set<MethodNode> findDGMMethodsForClassNode(ClassNode clazz) {
-        Set<MethodNode> result = new HashSet<MethodNode>();
+
+    static Set<MethodNode> findDGMMethodsForClassNode(ClassNode clazz, String name) {
+        TreeSet<MethodNode> accumulator = new TreeSet<MethodNode>(DGM_METHOD_NODE_COMPARATOR);
+        findDGMMethodsForClassNode(clazz, name, accumulator);
+        return accumulator;
+    }
+
+    static void findDGMMethodsForClassNode(ClassNode clazz, String name, TreeSet<MethodNode> accumulator) {
         List<MethodNode> fromDGM = VIRTUAL_DGM_METHODS.get(clazz.getName());
-        if (fromDGM != null) result.addAll(fromDGM);
+        if (fromDGM != null) {
+            for (MethodNode node : fromDGM) {
+                if (node.getName().equals(name)) accumulator.add(node);
+            }
+        }
         for (ClassNode node : clazz.getInterfaces()) {
-            result.addAll(findDGMMethodsForClassNode(node));
+            findDGMMethodsForClassNode(node, name, accumulator);
         }
         if (clazz.getSuperClass() != null) {
-            result.addAll(findDGMMethodsForClassNode(clazz.getSuperClass()));
+            findDGMMethodsForClassNode(clazz.getSuperClass(), name, accumulator);
         } else if (!clazz.equals(ClassHelper.OBJECT_TYPE)) {
-            result.addAll(findDGMMethodsForClassNode(ClassHelper.OBJECT_TYPE));
+            findDGMMethodsForClassNode(ClassHelper.OBJECT_TYPE, name, accumulator);
         }
-
-        return result;
     }
 
     /**
diff --git a/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java b/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
index 58afd86226..8b204dab2b 100644
--- a/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
+++ b/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
@@ -1118,11 +1118,8 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
 
     private List<MethodNode> findDGMMethodsByNameAndArguments(final ClassNode receiver, final String name, final ClassNode[] args, final List<MethodNode> methods) {
         final List<MethodNode> chosen;
-        Set<MethodNode> fromDGM = findDGMMethodsForClassNode(receiver);
+        methods.addAll(findDGMMethodsForClassNode(receiver, name));
 
-        for (MethodNode methodNode : fromDGM) {
-            if (methodNode.getName().equals(name)) methods.add(methodNode);
-        }
         chosen = chooseBestBethod(receiver, methods, args);
             return chosen;
         }
diff --git a/src/test/groovy/transform/stc/ArraysAndCollectionsSTCTest.groovy b/src/test/groovy/transform/stc/ArraysAndCollectionsSTCTest.groovy
index ea7445d470..f58ff716d4 100644
--- a/src/test/groovy/transform/stc/ArraysAndCollectionsSTCTest.groovy
+++ b/src/test/groovy/transform/stc/ArraysAndCollectionsSTCTest.groovy
@@ -187,5 +187,10 @@ class ArraysAndCollectionsSTCTest extends StaticTypeCheckingTestCase {
         '''
     }
 
+    void testCollectMethodCallOnList() {
+        assertScript '''
+            [1,2,3].collect { it.toString() }
+        '''
+    }
 }
 
