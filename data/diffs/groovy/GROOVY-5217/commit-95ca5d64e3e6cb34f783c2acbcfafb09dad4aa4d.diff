diff --git a/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java b/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
index 4867fcad52..e9902b9e46 100644
--- a/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
+++ b/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
@@ -984,74 +984,92 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
                 callArguments.visit(this);
             }
 
-            // method call receivers are :
-            //   - possible "with" receivers
-            //   - the actual receiver as found in the method call expression
-            //   - any of the potential receivers found in the instanceof temporary table
-            // in that order
-            List<ClassNode> receivers = new LinkedList<ClassNode>();
-            if (!withReceiverList.isEmpty()) receivers.addAll(withReceiverList);
-            receivers.add(receiver);
-            if (objectExpression instanceof ClassExpression) {
-                receivers.add(CLASS_Type);
-            }
-            if (!temporaryIfBranchTypeInformation.empty()) {
-                final Map<Object, List<ClassNode>> tempo = temporaryIfBranchTypeInformation.peek();
-                Object key = extractTemporaryTypeInfoKey(objectExpression);
-                List<ClassNode> potentialReceiverType = tempo.get(key);
-                if (potentialReceiverType != null) receivers.addAll(potentialReceiverType);
-            }
-            List<MethodNode> mn = null;
-            ClassNode chosenReceiver = null;
-            for (ClassNode currentReceiver : receivers) {
-                mn = findMethod(currentReceiver, name, args);
-                if (!mn.isEmpty()) {
-                    typeCheckMethodsWithGenerics(currentReceiver, args, mn, call);
-                    chosenReceiver = currentReceiver;
-                    break;
-                }
-            }
-            if (mn.isEmpty()) {
-                addStaticTypeError("Cannot find matching method " + receiver.getName() + "#" + toMethodParametersString(name, args), call);
-            } else {
-                if (isCallOnClosure) {
-                    // this is a closure.call() call
-                    if (objectExpression instanceof VariableExpression) {
-                        Variable variable = findTargetVariable((VariableExpression)objectExpression);
-                        if (variable instanceof Expression) {
-                            Object data = ((Expression) variable).getNodeMetaData(StaticTypesMarker.CLOSURE_ARGUMENTS);
-                            if (data!=null) {
-                                Parameter[] parameters = (Parameter[]) data;
-                                typeCheckClosureCall(callArguments, args, parameters);
-                            }
-                            Object type = ((Expression) variable).getNodeMetaData(StaticTypesMarker.INFERRED_RETURN_TYPE);
-                            if (type!=null) {
-                                 storeType(call, (ClassNode) type);
+            if (isCallOnClosure) {
+                // this is a closure.call() call
+                if (objectExpression==VariableExpression.THIS_EXPRESSION) {
+                    // isClosureCall() check verified earlier that a field exists
+                    FieldNode field = classNode.getDeclaredField(name);
+                    ClassNode closureReturnType = field.getType().getGenericsTypes()[0].getType();
+                    Object data = field.getNodeMetaData(StaticTypesMarker.CLOSURE_ARGUMENTS);
+                    if (data != null) {
+                        Parameter[] parameters = (Parameter[]) data;
+                        typeCheckClosureCall(callArguments, args, parameters);
+                    }
+                    storeType(call, closureReturnType);
+                } else if (objectExpression instanceof VariableExpression) {
+                    Variable variable = findTargetVariable((VariableExpression) objectExpression);
+                    if (variable instanceof Expression) {
+                        Object data = ((Expression) variable).getNodeMetaData(StaticTypesMarker.CLOSURE_ARGUMENTS);
+                        if (data != null) {
+                            Parameter[] parameters = (Parameter[]) data;
+                            typeCheckClosureCall(callArguments, args, parameters);
+                        }
+                        Object type = ((Expression) variable).getNodeMetaData(StaticTypesMarker.INFERRED_RETURN_TYPE);
+                        if (type == null) {
+                            // if variable was declared as a closure and inferred type is unknown, we
+                            // may face a recursive call. In that case, we will use the type of the
+                            // generic return type of the closure declaration
+                            if (variable.getType().equals(CLOSURE_TYPE)) {
+                                type = variable.getType().getGenericsTypes()[0].getType();
                             }
                         }
-                    } else if (objectExpression instanceof ClosureExpression) {
-                        // we can get actual parameters directly
-                        Parameter[] parameters = ((ClosureExpression)objectExpression).getParameters();
-                        typeCheckClosureCall(callArguments, args, parameters);
-                        Object data = objectExpression.getNodeMetaData(StaticTypesMarker.INFERRED_RETURN_TYPE);
-                        if (data!=null) {
-                            storeType(call, (ClassNode) data);
+                        if (type != null) {
+                            storeType(call, (ClassNode) type);
                         }
                     }
-                    int nbOfArgs = 0;
-                    if (callArguments instanceof ArgumentListExpression) {
-                        ArgumentListExpression list = (ArgumentListExpression) callArguments;
-                        nbOfArgs = list.getExpressions().size();
-                    } else {
-                        // todo : other cases
-                        nbOfArgs = 0;
+                } else if (objectExpression instanceof ClosureExpression) {
+                    // we can get actual parameters directly
+                    Parameter[] parameters = ((ClosureExpression) objectExpression).getParameters();
+                    typeCheckClosureCall(callArguments, args, parameters);
+                    Object data = objectExpression.getNodeMetaData(StaticTypesMarker.INFERRED_RETURN_TYPE);
+                    if (data != null) {
+                        storeType(call, (ClassNode) data);
                     }
-                    storeTargetMethod(call,
-                            nbOfArgs==0?CLOSURE_CALL_NO_ARG:
-                            nbOfArgs==1?CLOSURE_CALL_ONE_ARG:
-                            CLOSURE_CALL_VARGS);
+                }
+                int nbOfArgs = 0;
+                if (callArguments instanceof ArgumentListExpression) {
+                    ArgumentListExpression list = (ArgumentListExpression) callArguments;
+                    nbOfArgs = list.getExpressions().size();
                 } else {
-                    if (mn.size()==1) {
+                    // todo : other cases
+                    nbOfArgs = 0;
+                }
+                storeTargetMethod(call,
+                        nbOfArgs==0?CLOSURE_CALL_NO_ARG:
+                        nbOfArgs==1?CLOSURE_CALL_ONE_ARG:
+                                    CLOSURE_CALL_VARGS);
+            } else {
+                // method call receivers are :
+                //   - possible "with" receivers
+                //   - the actual receiver as found in the method call expression
+                //   - any of the potential receivers found in the instanceof temporary table
+                // in that order
+                List<ClassNode> receivers = new LinkedList<ClassNode>();
+                if (!withReceiverList.isEmpty()) receivers.addAll(withReceiverList);
+                receivers.add(receiver);
+                if (objectExpression instanceof ClassExpression) {
+                    receivers.add(CLASS_Type);
+                }
+                if (!temporaryIfBranchTypeInformation.empty()) {
+                    final Map<Object, List<ClassNode>> tempo = temporaryIfBranchTypeInformation.peek();
+                    Object key = extractTemporaryTypeInfoKey(objectExpression);
+                    List<ClassNode> potentialReceiverType = tempo.get(key);
+                    if (potentialReceiverType != null) receivers.addAll(potentialReceiverType);
+                }
+                List<MethodNode> mn = null;
+                ClassNode chosenReceiver = null;
+                for (ClassNode currentReceiver : receivers) {
+                    mn = findMethod(currentReceiver, name, args);
+                    if (!mn.isEmpty()) {
+                        typeCheckMethodsWithGenerics(currentReceiver, args, mn, call);
+                        chosenReceiver = currentReceiver;
+                        break;
+                    }
+                }
+                if (mn.isEmpty()) {
+                    addStaticTypeError("Cannot find matching method " + receiver.getName() + "#" + toMethodParametersString(name, args), call);
+                } else {
+                    if (mn.size() == 1) {
                         MethodNode directMethodCallCandidate = mn.get(0);
                         // visit the method to obtain inferred return type
                         ClassNode currentClassNode = classNode;
@@ -1065,14 +1083,14 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
                         storeType(call, returnType);
                         storeTargetMethod(call, directMethodCallCandidate);
 
-						// if the object expression is a closure shared variable, we will have to perform a second pass
-						if (objectExpression instanceof VariableExpression) {
-							VariableExpression var = (VariableExpression) objectExpression;
-							if (var.isClosureSharedVariable()) secondPassExpressions.add(call);
-						}
+                        // if the object expression is a closure shared variable, we will have to perform a second pass
+                        if (objectExpression instanceof VariableExpression) {
+                            VariableExpression var = (VariableExpression) objectExpression;
+                            if (var.isClosureSharedVariable()) secondPassExpressions.add(call);
+                        }
 
                     } else {
-                        addStaticTypeError("Reference to method is ambiguous. Cannot choose between "+mn, call);
+                        addStaticTypeError("Reference to method is ambiguous. Cannot choose between " + mn, call);
                     }
                 }
             }
@@ -1089,8 +1107,17 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
     }
 
     private boolean isClosureCall(final String name, final Expression objectExpression) {
-        if (!"call".equals(name)) return false;
+        //if (!"call".equals(name)) return false;
         if (objectExpression instanceof ClosureExpression) return true;
+        if (objectExpression==VariableExpression.THIS_EXPRESSION) {
+            FieldNode fieldNode = classNode.getDeclaredField(name);
+            if (fieldNode!=null) {
+                ClassNode type = fieldNode.getType();
+                if (CLOSURE_TYPE.equals(type)) {
+                    return true;
+                }
+            }
+        }
         return (getType(objectExpression).equals(CLOSURE_TYPE));
     }
 
diff --git a/src/test/groovy/transform/stc/ClosuresSTCTest.groovy b/src/test/groovy/transform/stc/ClosuresSTCTest.groovy
index 23613c007a..230a8f7f8c 100644
--- a/src/test/groovy/transform/stc/ClosuresSTCTest.groovy
+++ b/src/test/groovy/transform/stc/ClosuresSTCTest.groovy
@@ -126,5 +126,48 @@ class ClosuresSTCTest extends StaticTypeCheckingTestCase {
         ''', 'A closure shared variable [x] has been assigned with various types and the method [charAt(int)] does not exist in the lowest upper bound'
     }
 
+    void testClosureCallAsAMethod() {
+        assertScript '''
+            Closure cl = { 'foo' }
+            assert cl() == 'foo'
+        '''
+    }
+
+    void testClosureCallWithOneArgAsAMethod() {
+        assertScript '''
+            Closure cl = { int x -> "foo$x" }
+            assert cl(1) == 'foo1'
+        '''
+    }
+
+    void testRecurseClosureCallAsAMethod() {
+        assertScript '''
+            Closure<Integer> cl
+            cl = { int x-> x==0?x:1+cl(x-1) }
+        '''
+    }
+
+    void testFibClosureCallAsAMethod() {
+        assertScript '''
+            Closure<Integer> fib
+            fib = { int x-> x<1?x:fib(x-1)+fib(x-2) }
+            fib(2)
+        '''
+    }
+
+    void testFibClosureCallAsAMethodFromWithinClass() {
+        assertScript '''
+            class FibUtil {
+                private Closure<Integer> fibo
+                FibUtil() {
+                    fibo = { int x-> x<1?x:fibo(x-1)+fibo(x-2) }
+                }
+
+                int fib(int n) { fibo(n) }
+            }
+            FibUtil fib = new FibUtil()
+            fib.fib(2)
+        '''
+    }
 }
 
