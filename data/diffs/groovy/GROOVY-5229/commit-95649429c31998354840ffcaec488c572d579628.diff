diff --git a/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java b/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
index 15b30619cf..64819156a4 100644
--- a/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
+++ b/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
@@ -44,7 +44,6 @@ import static org.codehaus.groovy.transform.stc.StaticTypeCheckingSupport.*;
  */
 public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
     private static final ClassNode ITERABLE_TYPE = ClassHelper.make(Iterable.class);
-    private final static ClassNode READONLY_PROPERTY_RETURN = ClassHelper.make("<readonly>");
     private final static List<MethodNode> EMPTY_METHODNODE_LIST = Collections.emptyList();
 
     private SourceUnit source;
@@ -369,13 +368,12 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
             return;
         }
         boolean compatible = checkCompatibleAssignmentTypes(leftRedirect, inferredRightExpressionType, rightExpression);
+        // if leftRedirect is of READONLY_PROPERTY_RETURN type, then it means we are on a missing property
+        if (leftExpression.getNodeMetaData(StaticTypesMarker.READONLY_PROPERTY)!=null && (leftExpression instanceof PropertyExpression)) {
+            addStaticTypeError("Cannot set read-only property: "+((PropertyExpression)leftExpression).getPropertyAsString(), leftExpression);
+        }
         if (!compatible) {
-            // if leftRedirect is of READONLY_PROPERTY_RETURN type, then it means we are on a missing property
-            if ((leftRedirect == READONLY_PROPERTY_RETURN) && (leftExpression instanceof PropertyExpression)) {
-                addStaticTypeError("Cannot set read-only property: "+((PropertyExpression)leftExpression).getPropertyAsString(), leftExpression);
-            } else {
-                addStaticTypeError("Cannot assign value of type " + inferredRightExpressionType.getName() + " to variable of type " + leftExpressionType.getName(), assignmentExpression);
-            }
+          addStaticTypeError("Cannot assign value of type " + inferredRightExpressionType.getName() + " to variable of type " + leftExpressionType.getName(), assignmentExpression);
         } else {
             // if closure expression on RHS, then copy the inferred closure return type
             if (rightExpression instanceof ClosureExpression) {
@@ -557,6 +555,7 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
         }
         String propertyName = pexp.getPropertyAsString();
         if (propertyName==null) return false;
+        String capName = MetaClassHelper.capitalize(propertyName);
         boolean isAttributeExpression = pexp instanceof AttributeExpression;
         for (ClassNode testClass : tests) {
             // maps and lists have special handling for property expressions
@@ -570,6 +569,17 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
                         storeType(pexp, propertyNode.getOriginType());
                         return true;
                     }
+                    MethodNode getter = current.getGetterMethod("get" + capName);
+                    if (getter==null) getter = current.getGetterMethod("is"+capName);
+                    if (getter!=null) {
+                        // check that a setter also exists
+                        MethodNode setterMethod = current.getSetterMethod("set" + capName);
+                        if (setterMethod!=null) {
+                            if (visitor!=null) visitor.visitMethod(getter);
+                            storeType(pexp, getter.getReturnType());
+                            return true;
+                        }
+                    }
                     if (!isAttributeExpression) {
                         FieldNode field = current.getDeclaredField(propertyName);
                         if (field != null) {
@@ -587,18 +597,13 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
                     while (current != null) {
                         current = current.redirect();
 
-                        String pname = MetaClassHelper.capitalize(propertyName);
-                        List<MethodNode> nodes = current.getMethods("get" + pname);
-                        if (nodes.isEmpty()) nodes = current.getMethods("is" + pname);
-                        if (!nodes.isEmpty()) {
-                            for (MethodNode node : nodes) {
-                                Parameter[] parameters = node.getParameters();
-                                if (node.getReturnType() != VOID_TYPE && (parameters == null || parameters.length == 0)) {
-                                    if (visitor != null) visitor.visitMethod(node);
-                                    storeType(pexp, READONLY_PROPERTY_RETURN);
-                                    return true;
-                                }
-                            }
+                        MethodNode getter = current.getGetterMethod("get" + capName);
+                        if (getter==null) getter = current.getGetterMethod("is"+capName);
+                        if (getter!=null) {
+                            if (visitor != null) visitor.visitMethod(getter);
+                            pexp.putNodeMetaData(StaticTypesMarker.READONLY_PROPERTY, Boolean.TRUE);
+                            storeType(pexp, getter.getReturnType());
+                            return true;
                         }
                         // if the property expression is an attribute expression (o.@attr), then
                         // we stop now, otherwise we must check the parent class
diff --git a/src/main/org/codehaus/groovy/transform/stc/StaticTypesMarker.java b/src/main/org/codehaus/groovy/transform/stc/StaticTypesMarker.java
index c22e5b8e62..26aaffde4b 100644
--- a/src/main/org/codehaus/groovy/transform/stc/StaticTypesMarker.java
+++ b/src/main/org/codehaus/groovy/transform/stc/StaticTypesMarker.java
@@ -25,5 +25,6 @@ public enum StaticTypesMarker {
     DECLARATION_INFERRED_TYPE, // in flow analysis, represents the type of the declaration node lhs
     INFERRED_RETURN_TYPE, // used to store inferred return type for methods and closures
     CLOSURE_ARGUMENTS, // used to store closure argument types on a variable expression
+    READONLY_PROPERTY, // used to tell that a property expression refers to a readonly property
     DIRECT_METHOD_CALL_TARGET // used to store the MethodNode a MethodCallExpression should target
 }
diff --git a/src/test/groovy/transform/stc/FieldsAndPropertiesSTCTest.groovy b/src/test/groovy/transform/stc/FieldsAndPropertiesSTCTest.groovy
index 072a49ab7b..dde04467ee 100644
--- a/src/test/groovy/transform/stc/FieldsAndPropertiesSTCTest.groovy
+++ b/src/test/groovy/transform/stc/FieldsAndPropertiesSTCTest.groovy
@@ -185,6 +185,14 @@ class FieldsAndPropertiesSTCTest extends StaticTypeCheckingTestCase {
         '''
     }
 
+    void testDateProperties() {
+        assertScript '''
+            Date d = new Date()
+            def time = d.time
+            d.time = 0
+        '''
+    }
+
     public static class BaseClass {
         int x
     }
