diff --git a/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java b/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
index 14bde40855..baccf7a915 100644
--- a/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
+++ b/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
@@ -86,6 +86,7 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
     private MethodNode methodNode;
     private Set<MethodNode> methodsToBeVisited = Collections.emptySet();
     private ErrorCollector errorCollector;
+    private boolean isInStaticContext = false;
 
     // used for closure return type inference
     private ClosureExpression closureExpression;
@@ -820,6 +821,17 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
         return false;
     }
 
+    @Override
+    public void visitField(final FieldNode node) {
+        final boolean osc = isInStaticContext;
+        try {
+            isInStaticContext = node.isInStaticContext();
+            super.visitField(node);
+        } finally {
+            isInStaticContext = osc;
+        }
+    }
+
     @Override
     public void visitForLoop(final ForStatement forLoop) {
         // collect every variable expression used in the loop body
@@ -1181,8 +1193,14 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
         // We do not check for an annotation because some other AST transformations
         // may use this visitor without the annotation being explicitely set
         if (!methodsToBeVisited.isEmpty() && !methodsToBeVisited.contains(node)) return;
+        final boolean osc = isInStaticContext;
+        try {
+            isInStaticContext = node.isStatic();
         super.visitMethod(node);
         addTypeCheckingInfoAnnotation(node);
+        } finally {
+            isInStaticContext = osc;
+    }
     }
 
     protected void addTypeCheckingInfoAnnotation(final MethodNode node) {
@@ -1494,6 +1512,31 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
                 ClassNode chosenReceiver = null;
                 for (ClassNode currentReceiver : receivers) {
                     mn = findMethod(currentReceiver, name, args);
+
+                    // if the receiver is "this" or "implicit this", then we must make sure that the compatible
+                    // methods are only static if we are in a static context
+                    if (!mn.isEmpty() && isInStaticContext && (call.isImplicitThis()
+                            || (objectExpression instanceof VariableExpression && ((VariableExpression)objectExpression).isThisExpression()))) {
+                        // we create a separate method list just to be able to print out
+                        // a nice error message to the user
+                        List<MethodNode> staticMethods = new LinkedList<MethodNode>();
+                        List<MethodNode> nonStaticMethods = new LinkedList<MethodNode>();
+                        for (final MethodNode node : mn) {
+                            if (node.isStatic()) {
+                                staticMethods.add(node);
+                            } else {
+                                nonStaticMethods.add(node);
+                            }
+                        }
+                        mn = staticMethods;
+                        if (staticMethods.isEmpty()) {
+                            // choose an arbitrary method to display an error message
+                            MethodNode node = nonStaticMethods.get(0);
+                            ClassNode owner = node.getDeclaringClass();
+                            addStaticTypeError("Non static method "+owner.getName()+"#"+node.getName()+" cannot be called from static context", call);
+                        }
+                    }
+
                     if (!mn.isEmpty()) {
                         if (mn.size() == 1) typeCheckMethodsWithGenerics(currentReceiver, args, mn.get(0), call);
                         chosenReceiver = currentReceiver;
diff --git a/src/test/groovy/transform/stc/MethodCallsSTCTest.groovy b/src/test/groovy/transform/stc/MethodCallsSTCTest.groovy
index 1f3aa7e43a..f5f482eed0 100644
--- a/src/test/groovy/transform/stc/MethodCallsSTCTest.groovy
+++ b/src/test/groovy/transform/stc/MethodCallsSTCTest.groovy
@@ -534,6 +534,43 @@ class MethodCallsSTCTest extends StaticTypeCheckingTestCase {
         ''', '#square(double)', '#square(float)'
     }
 
+    void testShouldNotAllowMethodCallFromStaticContext() {
+        shouldFailWithMessages '''
+            class A {
+                void instanceMethod() {}
+
+                static void staticMethod() {
+                    instanceMethod() // calling instance method from static context
+                }
+            }
+            A.staticMethod()
+        ''', 'Non static method A#instanceMethod cannot be called from static context'
+    }
+
+    void testShouldNotAllowMethodCallFromStaticConstructor() {
+        shouldFailWithMessages '''
+            class A {
+                void instanceMethod() {}
+
+                static {
+                    instanceMethod() // calling instance method from static context
+                }
+            }
+            new A()
+        ''', 'Non static method A#instanceMethod cannot be called from static context'
+    }
+
+    void testShouldNotAllowMethodCallFromStaticField() {
+        shouldFailWithMessages '''
+            class A {
+                boolean instanceMethod() { true }
+
+                static FOO = instanceMethod()
+            }
+            new A()
+        ''', 'Non static method A#instanceMethod cannot be called from static context'
+    }
+
     static class MyMethodCallTestClass {
 
         static int mul(int... args) { args.toList().inject(1) { x,y -> x*y } }
