diff --git a/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java b/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
index 1262f0d945..c38d9fb5f0 100644
--- a/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
+++ b/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
@@ -459,7 +459,12 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
     private void inferDiamondType(final ConstructorCallExpression cce, final ClassNode lType) {
         // check if constructor call expression makes use of the diamond operator
         ClassNode node = cce.getType();
-        if (node.isUsingGenerics() && node.getGenericsTypes()!=null && node.getGenericsTypes().length == 0) {
+        if (node.isUsingGenerics() && node instanceof InnerClassNode && ((InnerClassNode) node).isAnonymous()) {
+            // InterfaceA<Foo> obj = new InterfaceA<>() { ... }
+            // InterfaceA<Foo> obj = new ClassA<>() { ... }
+            // ClassA<Foo> obj = new ClassA<>() { ... }
+            addStaticTypeError("Cannot use diamond <> with anonymous inner classes", cce);
+        } else if (node.isUsingGenerics() && node.getGenericsTypes()!=null && node.getGenericsTypes().length == 0) {
             ArgumentListExpression argumentListExpression = InvocationWriter.makeArgumentList(cce.getArguments());
             if (argumentListExpression.getExpressions().isEmpty()) {
                 GenericsType[] genericsTypes = lType.getGenericsTypes();
diff --git a/src/test/groovy/transform/stc/GenericsSTCTest.groovy b/src/test/groovy/transform/stc/GenericsSTCTest.groovy
index 57e53f9157..ed2788ea7f 100644
--- a/src/test/groovy/transform/stc/GenericsSTCTest.groovy
+++ b/src/test/groovy/transform/stc/GenericsSTCTest.groovy
@@ -615,6 +615,12 @@ class GenericsSTCTest extends StaticTypeCheckingTestCase {
         '''
     }
 
+    void testInferDiamondUsingAIC() {
+        shouldFailWithMessages '''
+            Map<String,Date> map = new HashMap<>() {}
+        ''', 'Cannot use diamond <> with anonymous inner classes'
+    }
+
     static class MyList extends LinkedList<String> {}
 
     public static class ClassA<T> {
