diff --git a/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java b/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
index 7b07dcd3c6..42ae63a74f 100644
--- a/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
+++ b/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
@@ -1002,8 +1002,14 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
                         FieldNode field = current.getDeclaredField(propertyName);
                         if (field != null) {
                             if (visitor != null) visitor.visitField(field);
-                            storeInferredTypeForPropertyExpression(pexp, field.getOriginType());
-                            storeType(pexp, field.getOriginType());
+                            ClassNode type = field.getOriginType();
+                            if (getGenericsWithoutArray(type)!=null) {
+                                Map<String, GenericsType> resolvedPlaceholders = resolvePlaceHoldersFromDeclartion(objectExpressionType, current, null, field.isStatic());
+                                type = resolveGenericsWithContext(resolvedPlaceholders, type);
+                            }
+
+                            storeInferredTypeForPropertyExpression(pexp, type);
+                            storeType(pexp, type);
                             checkOrMarkPrivateAccess(field);
                             return true;
                         }
@@ -3317,8 +3323,8 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
         }
         if (!isUsingGenericsOrIsArrayUsingGenerics(returnType)) return returnType;
         if (getGenericsWithoutArray(returnType)==null) return returnType;
-        
-        Map<String, GenericsType> resolvedPlaceholders = resolvePlaceHolders(receiver, method, arguments);
+
+        Map<String, GenericsType> resolvedPlaceholders = resolvePlaceHoldersFromDeclartion(receiver, getDeclaringClass(method, arguments), method, method.isStatic());
         if (resolvedPlaceholders.isEmpty()) return returnType;
         // then resolve receivers from method arguments
         Parameter[] parameters = method.getParameters();
@@ -3373,20 +3379,24 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
             }
         }
 
+        return resolveGenericsWithContext(resolvedPlaceholders, returnType);
+    }
+    
+    private ClassNode resolveGenericsWithContext(Map<String, GenericsType> resolvedPlaceholders, ClassNode currentType) {
         Map<String, GenericsType> placeholdersFromContext = getGenericsParameterMapOfThis(typeCheckingContext.getEnclosingMethod());
         applyContextGenerics(resolvedPlaceholders,placeholdersFromContext);
-        returnType = applyGenerics(returnType, resolvedPlaceholders);
+        currentType = applyGenerics(currentType, resolvedPlaceholders);
 
         // GROOVY-5748
-        if (returnType.isGenericsPlaceHolder()) {
-            GenericsType resolved = resolvedPlaceholders.get(returnType.getUnresolvedName());
+        if (currentType.isGenericsPlaceHolder()) {
+            GenericsType resolved = resolvedPlaceholders.get(currentType.getUnresolvedName());
             if (resolved!=null && !resolved.isPlaceholder() && !resolved.isWildcard()) {
                 return resolved.getType();
             }
         }
 
-        GenericsType[] returnTypeGenerics = getGenericsWithoutArray(returnType);
-        if (returnTypeGenerics==null) return returnType;
+        GenericsType[] returnTypeGenerics = getGenericsWithoutArray(currentType);
+        if (returnTypeGenerics==null) return currentType;
         GenericsType[] copy = new GenericsType[returnTypeGenerics.length];
         for (int i = 0; i < copy.length; i++) {
             GenericsType returnTypeGeneric = returnTypeGenerics[i];
@@ -3399,7 +3409,7 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
             }
         }
         GenericsType firstGenericsType = copy[0];
-        if (returnType.equals(OBJECT_TYPE)) {
+        if (currentType.equals(OBJECT_TYPE)) {
             if (firstGenericsType.getType().isGenericsPlaceHolder()) return OBJECT_TYPE;
 
             if (firstGenericsType.isWildcard()) {
@@ -3416,22 +3426,22 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
             }
             return firstGenericsType.getType();
         }
-        if (returnType.isArray()) {
-            returnType = returnType.getComponentType().getPlainNodeReference();
-            returnType.setGenericsTypes(copy);
-            if (OBJECT_TYPE.equals(returnType)) {
+        if (currentType.isArray()) {
+            currentType = currentType.getComponentType().getPlainNodeReference();
+            currentType.setGenericsTypes(copy);
+            if (OBJECT_TYPE.equals(currentType)) {
                 // replace Object<Component> with Component
-                returnType = firstGenericsType.getType();
+                currentType = firstGenericsType.getType();
             }
-            returnType = returnType.makeArray();
+            currentType = currentType.makeArray();
         } else {
-            returnType = returnType.getPlainNodeReference();
-            returnType.setGenericsTypes(copy);
+            currentType = currentType.getPlainNodeReference();
+            currentType.setGenericsTypes(copy);
         }
-        if (returnType.equals(Annotation_TYPE) && returnType.getGenericsTypes() != null && !returnType.getGenericsTypes()[0].isPlaceholder()) {
-            return returnType.getGenericsTypes()[0].getType();
+        if (currentType.equals(Annotation_TYPE) && currentType.getGenericsTypes() != null && !currentType.getGenericsTypes()[0].isPlaceholder()) {
+            return currentType.getGenericsTypes()[0].getType();
         }
-        return returnType;
+        return currentType;
     }
 
     private GenericsType[] getGenericsWithoutArray(ClassNode type) {
@@ -3454,14 +3464,13 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
         return declaringClass;
     }
     
-    private Map<String, GenericsType> resolvePlaceHolders(ClassNode receiver, MethodNode method, Expression arguments) {
+    private Map<String, GenericsType> resolvePlaceHoldersFromDeclartion(ClassNode receiver, ClassNode declaration, MethodNode method, boolean isStaticTarget) {
         Map<String, GenericsType> resolvedPlaceholders;
-        if (method.isStatic() && CLASS_Type.equals(receiver) && receiver.isUsingGenerics() && receiver.getGenericsTypes().length>0) {
+        if (isStaticTarget && CLASS_Type.equals(receiver) && receiver.isUsingGenerics() && receiver.getGenericsTypes().length>0) {
             resolvedPlaceholders = new HashMap<String, GenericsType>();
             GenericsUtils.extractPlaceholders(receiver.getGenericsTypes()[0].getType(), resolvedPlaceholders);
         } else {
-            ClassNode declaringClass = getDeclaringClass(method, arguments);
-            resolvedPlaceholders = extractPlaceHolders(method, receiver, declaringClass);
+            resolvedPlaceholders = extractPlaceHolders(method, receiver, declaration);
         }
         return resolvedPlaceholders;
     }
@@ -3475,7 +3484,7 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
     private static Map<String, GenericsType> extractPlaceHolders(MethodNode method, ClassNode receiver, ClassNode declaringClass) {
         if (declaringClass.equals(OBJECT_TYPE)) {
             Map<String, GenericsType> resolvedPlaceholders = new HashMap<String, GenericsType>();
-            addMethodLevelDeclaredGenerics(method, resolvedPlaceholders);
+            if (method!=null) addMethodLevelDeclaredGenerics(method, resolvedPlaceholders);
             return resolvedPlaceholders;
         }
 
@@ -3486,7 +3495,7 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
             Map<String, GenericsType> currentPlaceHolders = new HashMap<String, GenericsType>();
             GenericsUtils.extractPlaceholders(current, currentPlaceHolders);
 
-            if (declaringClass.equals(current)) {
+            if (method!=null && declaringClass.equals(current)) {
                 addMethodLevelDeclaredGenerics(method, currentPlaceHolders);
             }
 
@@ -3520,9 +3529,11 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
             if (nextNode==null) nextNode = current.getUnresolvedSuperClass();
             current = nextNode;
             if (current==null) {
+                String descriptor = "<>";
+                if (method!=null) descriptor = method.getTypeDescriptor();
                 throw new GroovyBugError(
                         "Declaring class for method call to '" +
-                        method.getTypeDescriptor() + "' declared in " + declaringClass.getName() +
+                        descriptor + "' declared in " + declaringClass.getName() +
                         " was not matched with found receiver "+ receiver.getName() + "." +
                         " This should not have happened!");
             }
diff --git a/src/test/groovy/transform/stc/GenericsSTCTest.groovy b/src/test/groovy/transform/stc/GenericsSTCTest.groovy
index 9cf82c38bf..2deae96efb 100644
--- a/src/test/groovy/transform/stc/GenericsSTCTest.groovy
+++ b/src/test/groovy/transform/stc/GenericsSTCTest.groovy
@@ -1257,8 +1257,8 @@ class GenericsSTCTest extends StaticTypeCheckingTestCase {
         "Cannot find matching method"
     }
     
-    // Groovy-6237
     void testHiddenGenerics() {
+        // Groovy-6237
         assertScript '''
             class MyList extends LinkedList<Object> {}
             List<Object> o = new MyList()
@@ -1270,6 +1270,16 @@ class GenericsSTCTest extends StaticTypeCheckingTestCase {
             List<Blah> o = new MyList()
         ''',
         'Incompatible generic argument types. Cannot assign MyList to: java.util.List <Blah>'
+        
+        // Groovy-5873
+        assertScript """
+            abstract class Parent<T> {
+                public T value
+            }
+            class Impl extends Parent<Integer> {}
+            Impl impl = new Impl()
+            Integer i = impl.value
+        """
     }
     
     static class MyList extends LinkedList<String> {}
