diff --git a/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java b/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
index 930156c996..58c070d1d6 100644
--- a/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
+++ b/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
@@ -3715,6 +3715,7 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
                             method.getExceptions(),
                             GENERATED_EMPTY_STATEMENT
                     );
+                    stubbed.setGenericsTypes(method.getGenericsTypes());
                 }
                 stubbed.setDeclaringClass(receiver);
                 result.add(stubbed);
diff --git a/src/test/org/codehaus/groovy/classgen/asm/sc/bugs/Groovy7364Bug.groovy b/src/test/org/codehaus/groovy/classgen/asm/sc/bugs/Groovy7364Bug.groovy
new file mode 100644
index 0000000000..0f34be29b5
--- /dev/null
+++ b/src/test/org/codehaus/groovy/classgen/asm/sc/bugs/Groovy7364Bug.groovy
@@ -0,0 +1,38 @@
+/*
+ * Copyright 2003-2015 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+
+
+
+package org.codehaus.groovy.classgen.asm.sc.bugs
+
+import groovy.transform.stc.StaticTypeCheckingTestCase
+import org.codehaus.groovy.classgen.asm.sc.StaticCompilationTestSupport
+
+class Groovy7364Bug extends StaticTypeCheckingTestCase implements StaticCompilationTestSupport {
+    void testGenericReturnTypeInferenceWithMethodHavingDefaultParams() {
+        assertScript '''
+
+                public <T> T f(T value, int param = 0) {
+                    value
+                }
+
+                def s = f('42')
+                s.length()
+        '''
+    }
+}
