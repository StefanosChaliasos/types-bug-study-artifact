diff --git a/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java b/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
index ce7158ea264..e4a660bf885 100644
--- a/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
+++ b/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
@@ -783,7 +783,7 @@ protected void inferDiamondType(final ConstructorCallExpression cce, final Class
             ArgumentListExpression argumentListExpression = InvocationWriter.makeArgumentList(cce.getArguments());
             if (argumentListExpression.getExpressions().isEmpty()) {
                 GenericsType[] genericsTypes = lType.getGenericsTypes();
-                if (lType.getGenericsTypes()==null) {
+                if (genericsTypes == null) {
                     // case of def foo = new HashMap<>()
                     genericsTypes = node.redirect().getGenericsTypes();
                 }
@@ -801,6 +801,9 @@ protected void inferDiamondType(final ConstructorCallExpression cce, final Class
                 ClassNode type = getType(argumentListExpression.getExpression(0));
                 if (type.isUsingGenerics()) {
                     GenericsType[] genericsTypes = type.getGenericsTypes();
+                    if (genericsTypes == null) {
+                        genericsTypes = node.redirect().getGenericsTypes();
+                    }
                     GenericsType[] copy = new GenericsType[genericsTypes.length];
                     for (int i = 0; i < genericsTypes.length; i++) {
                         GenericsType genericsType = genericsTypes[i];
diff --git a/src/test/groovy/transform/stc/Groovy7880Bug.groovy b/src/test/groovy/transform/stc/Groovy7880Bug.groovy
new file mode 100644
index 00000000000..033a55097b6
--- /dev/null
+++ b/src/test/groovy/transform/stc/Groovy7880Bug.groovy
@@ -0,0 +1,57 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package groovy.transform.stc
+
+import gls.CompilableTestSupport
+
+class Groovy7880Bug extends CompilableTestSupport {
+    void testDiamondUseShouldNotCauseNPE() {
+        shouldCompile '''
+            @groovy.transform.CompileStatic
+            class BugTest {
+                private class CompilerKiller<T> {
+                    private T t
+                    CompilerKiller(T t){ this.t = t }
+                    CompilerKiller(){ }
+                }
+
+                void "This works"(){
+                    CompilerKiller<BugTest> sample = new CompilerKiller<BugTest>()
+                }
+
+                void "This previously caused a NPE"(){
+                    CompilerKiller<BugTest> sample = new CompilerKiller<>(this)
+                }
+
+                void "This previously caused a NPE as well"(){
+                    CompilerKiller<BugTest> sample = new CompilerKiller<>(new BugTest())
+                }
+
+                void "This does work"(){
+                    CompilerKiller<BugTest> sample = new CompilerKiller<BugTest>(this)
+                }
+
+                void "This works as well"(){
+                    CompilerKiller<BugTest> sample = new CompilerKiller(this)
+                }
+            }
+        '''
+    }
+}
