diff --git a/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java b/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
index c538352e6d4..ef3feaf4d45 100644
--- a/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
+++ b/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
@@ -3245,7 +3245,7 @@ public void visitMethodCallExpression(MethodCallExpression call) {
                         if (typeCheckMethodsWithGenericsOrFail(chosenReceiver.getType(), args, mn.get(0), call)) {
                             returnType = adjustWithTraits(directMethodCallCandidate, chosenReceiver.getType(), args, returnType);
 
-                            if (null != typeCheckingContext.getEnclosingReturnStatement()) { // the method call is within return statement, we can try to infer type further
+                            if (null != typeCheckingContext.getEnclosingReturnStatement() && !inNestedMethodCall()) {
                                 ClassNode inferredType = infer(returnType, typeCheckingContext.getEnclosingMethod().getReturnType());
                                 if (null != inferredType) {
                                     returnType = inferredType;
@@ -3318,6 +3318,10 @@ public void visitMethodCallExpression(MethodCallExpression call) {
         }
     }
 
+    private boolean inNestedMethodCall() {
+        return typeCheckingContext.getEnclosingMethodCalls().size() > 1;
+    }
+
     /**
      * A special method handling the "withTrait" call for which the type checker knows more than
      * what the type signature is able to tell. If "withTrait" is detected, then a new class node
diff --git a/src/test/groovy/transform/stc/BugsSTCTest.groovy b/src/test/groovy/transform/stc/BugsSTCTest.groovy
index ef570c6acbc..37e0a99d51d 100644
--- a/src/test/groovy/transform/stc/BugsSTCTest.groovy
+++ b/src/test/groovy/transform/stc/BugsSTCTest.groovy
@@ -791,4 +791,18 @@ Printer
             assert foo.toString() == 'Foo([propWithGen], [notDecl], [fieldGen:42])'
         '''
     }
+
+    //GROOVY-8590
+    void testNestedMethodCallInferredTypeInReturnStmt() {
+        assertScript '''
+            class Source {
+                Object getValue() { '32' }
+            }
+            int m(Source src) {
+                return Integer.parseInt((String) src.getValue())
+            }
+            assert m(new Source()) == 32
+        '''
+    }
+
 }
