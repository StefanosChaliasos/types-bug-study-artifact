diff --git a/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java b/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
index cf59147772..0b1e2f0379 100644
--- a/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
+++ b/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java
@@ -3207,7 +3207,7 @@ public class StaticTypeCheckingVisitor extends ClassCodeVisitorSupport {
                         }
                     }
                     if (expression.getNodeMetaData(DELEGATION_METADATA) == null) {
-                        addError("Not enough arguments found for a @DelegatesTo method call. Please check that you either use an explicit class or @DelegatesTo.Target with a correct id", arguments);
+                        addError("Not enough arguments found for a @DelegatesTo method call. Please check that you either use an explicit class or @DelegatesTo.Target with a correct id", annotation);
                     }
                 }
             }
diff --git a/src/test/groovy/transform/stc/DelegatesToSTCTest.groovy b/src/test/groovy/transform/stc/DelegatesToSTCTest.groovy
index ef6ef594da..09284d971e 100644
--- a/src/test/groovy/transform/stc/DelegatesToSTCTest.groovy
+++ b/src/test/groovy/transform/stc/DelegatesToSTCTest.groovy
@@ -278,24 +278,21 @@ class DelegatesToSTCTest extends StaticTypeCheckingTestCase {
     }
 
     void testShouldFailDelegateToParameterIfNoTargetSpecified() {
-        shouldFailWithMessages '''
-        class Foo {
-            boolean called = false
-            def foo() { called = true }
-        }
+        shouldFailWithMessages '''\
+            class Foo {
+                boolean called = false
+                def bar() { called = true }
+            }
 
-        def with(Object target, @DelegatesTo Closure arg) {
-            arg.delegate = target
-            arg()
-        }
+            def m(Object o, @DelegatesTo Closure c) {
+                c.delegate = o
+                c.call()
+            }
 
-        def test() {
-            def obj = new Foo()
-            with(obj) { foo() }
-            assert obj.called
-        }
-        test()
-        ''', 'Not enough arguments found for a @DelegatesTo method call', 'Cannot find matching method'
+            def foo = new Foo()
+            m(foo) { -> bar() }
+            assert foo.called
+        ''', 'Not enough arguments found for a @DelegatesTo method call', '@ line 6, column 29', 'Cannot find matching method'
     }
 
     void testDelegatesToWithSetter() {
diff --git a/src/testFixtures/groovy/groovy/transform/stc/StaticTypeCheckingTestCase.groovy b/src/testFixtures/groovy/groovy/transform/stc/StaticTypeCheckingTestCase.groovy
index 8fde8efeb4..d47038ac36 100644
--- a/src/testFixtures/groovy/groovy/transform/stc/StaticTypeCheckingTestCase.groovy
+++ b/src/testFixtures/groovy/groovy/transform/stc/StaticTypeCheckingTestCase.groovy
@@ -19,6 +19,7 @@
 package groovy.transform.stc
 
 import groovy.test.GroovyTestCase
+import groovy.transform.AutoFinal
 import groovy.transform.CompileStatic
 import groovy.transform.TypeChecked
 import org.codehaus.groovy.control.CompilerConfiguration
@@ -30,7 +31,7 @@ import org.codehaus.groovy.control.messages.SyntaxErrorMessage
 /**
  * Support class for static type checking test cases.
  */
-@CompileStatic
+@AutoFinal @CompileStatic
 abstract class StaticTypeCheckingTestCase extends GroovyTestCase {
     protected CompilerConfiguration config
     protected GroovyShell shell
@@ -74,7 +75,7 @@ abstract class StaticTypeCheckingTestCase extends GroovyTestCase {
         loader.parseClass(classCode)
     }
 
-    protected void shouldFailWithMessages(final String code, final String... messages) {
+    protected void shouldFailWithMessages(String code, String... messages) {
         boolean success = false
         try {
             shell.evaluate(code, getTestClassName())
@@ -84,14 +85,13 @@ abstract class StaticTypeCheckingTestCase extends GroovyTestCase {
                     it instanceof SyntaxErrorMessage && it.cause.message.contains(message)
                 }
             }
-            if (success && mce.errorCollector.errorCount!=messages.length) {
-                throw new AssertionError("Expected error messages were found, but compiler threw additional errors : " + mce.toString())
+            if (success && mce.errorCollector.errorCount > messages.length) {
+                throw new AssertionError("Expected error messages were found, but compiler threw additional errors : $mce")
             }
             if (!success) {
-                throw new AssertionError("Not all expected error messages were found, compiler threw these errors : " + mce.toString())
+                throw new AssertionError("Not all expected error messages were found, compiler threw these errors : $mce")
             }
         }
         if (!success) throw new AssertionError("Test passed but should have failed with messages [$messages]")
     }
-
 }
