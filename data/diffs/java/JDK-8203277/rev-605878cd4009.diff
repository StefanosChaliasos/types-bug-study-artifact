changeset:   52697:605878cd4009
user:        vromero
date:        Tue Nov 27 11:07:44 2018 -0500
summary:     8203277: preflow visitor used during lambda attribution shouldn't visit class definitions inside the lambda body

diff -r b80549fdb52f -r 605878cd4009 src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java	Mon Nov 26 14:04:23 2018 +0100
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java	Tue Nov 27 11:07:44 2018 -0500
@@ -2903,6 +2903,15 @@
                     }
                     super.scan(tree);
                 }
+
+                @Override
+                public void visitClassDef(JCClassDecl that) {
+                    // or class declaration trees!
+                }
+
+                public void visitLambda(JCLambda that) {
+                    // or lambda expressions!
+                }
             }.scan(tree);
         }
 
diff -r b80549fdb52f -r 605878cd4009 test/langtools/tools/javac/T8203277/PreflowShouldVisitLambdaOrDiamondInsideLambdaTest.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/test/langtools/tools/javac/T8203277/PreflowShouldVisitLambdaOrDiamondInsideLambdaTest.java	Tue Nov 27 11:07:44 2018 -0500
@@ -0,0 +1,47 @@
+/*
+ * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*
+ * @test
+ * @bug 8203277
+ * @summary preflow visitor used during lambda attribution shouldn't visit class definitions inside the lambda body
+ * @compile PreflowShouldVisitLambdaOrDiamondInsideLambdaTest.java
+ */
+
+import java.util.List;
+import java.util.function.Function;
+
+class PreflowShouldVisitLambdaOrDiamondInsideLambdaTest {
+    void build() {
+        List<Function<String, Double>> list1 = transform(null,
+                builder -> new Function<>() {
+                    public Double apply(String params) { return null; }
+                });
+
+        List<Function<String, Double>> list2 = transform(null,
+                builder -> arg -> null);
+    }
+
+    static <Argument, Result> List<Result> transform(List<Argument> fromList,
+            Function<? super Argument,? extends Result> function) { return null; }
+}
diff -r b80549fdb52f -r 605878cd4009 test/langtools/tools/javac/api/TestGetScopeResult.java
--- a/test/langtools/tools/javac/api/TestGetScopeResult.java	Mon Nov 26 14:04:23 2018 +0100
+++ b/test/langtools/tools/javac/api/TestGetScopeResult.java	Tue Nov 27 11:07:44 2018 -0500
@@ -134,7 +134,7 @@
                implicitExplicitConflict1);
 
         String[] implicitExplicitConflict2 = {
-            "s:<any>",
+            "s:none",
             ":t",
             "super:java.lang.Object",
             "this:Test"
@@ -179,7 +179,8 @@
             List<String> expectedList = List.of(expected);
 
             if (!expectedList.equals(actual)) {
-                throw new IllegalStateException("Unexpected scope content: " + actual);
+                throw new IllegalStateException("Unexpected scope content: " + actual + "\n" +
+                                                 "expected: " + expectedList);
             }
         }
     }

