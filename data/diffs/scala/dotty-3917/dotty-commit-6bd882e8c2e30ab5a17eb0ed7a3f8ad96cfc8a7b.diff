diff --git a/compiler/src/dotty/tools/dotc/ast/tpd.scala b/compiler/src/dotty/tools/dotc/ast/tpd.scala
index dd65f4fdc1..02976046d1 100644
--- a/compiler/src/dotty/tools/dotc/ast/tpd.scala
+++ b/compiler/src/dotty/tools/dotc/ast/tpd.scala
@@ -826,14 +826,19 @@ object tpd extends Trees.Instance[Type] with TypedTreeInfo {
      */
     def becomes(rhs: Tree)(implicit ctx: Context): Tree =
       if (tree.symbol is Method) {
-        val setr = tree match {
-          case Ident(_) =>
-            val setter = tree.symbol.setter
-            assert(setter.exists, tree.symbol.showLocated)
-            ref(tree.symbol.setter)
-          case Select(qual, _) => qual.select(tree.symbol.setter)
+        val setter = tree.symbol.setter
+        assert(setter.exists, tree.symbol.showLocated)
+        val qual = tree match {
+          case id: Ident =>
+            id.tpe match {
+              case TermRef(prefix: TermRef, _) =>
+                ref(prefix)
+              case TermRef(prefix: ThisType, _) =>
+                This(prefix.cls)
+            }
+          case Select(qual, _) => qual
         }
-        setr.appliedTo(rhs)
+        qual.select(setter).appliedTo(rhs)
       }
       else Assign(tree, rhs)
 
diff --git a/tests/pos/i3917.scala b/tests/pos/i3917.scala
new file mode 100644
index 0000000000..19fd1506d6
--- /dev/null
+++ b/tests/pos/i3917.scala
@@ -0,0 +1,27 @@
+class A {
+  var a = false
+}
+
+object B {
+  var b = false
+}
+
+class C {
+  var c = false
+}
+
+object C extends A {
+  def test = {
+    a = true
+    C.a = true
+    this.a = true
+    C.this.a = true
+
+    import B._
+    b = true
+
+    val c0 = new C
+    import c0._
+    c = true
+  }
+}
