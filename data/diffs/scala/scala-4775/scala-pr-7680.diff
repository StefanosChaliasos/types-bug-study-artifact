diff --git a/spec/06-expressions.md b/spec/06-expressions.md
index 7fef8cf33bf7..4bf27606663e 100644
--- a/spec/06-expressions.md
+++ b/spec/06-expressions.md
@@ -1481,7 +1481,9 @@ question: given
 
 - A parameterized method $m$ of type `($p_1:T_1, \ldots , p_n:T_n$)$U$` is
   _as specific as_ some other member $m'$ of type $S$ if $m'$ is [applicable](#function-applications)
-  to arguments `($p_1 , \ldots , p_n$)` of types $T_1 , \ldots , T_n$.
+  to arguments `($p_1 , \ldots , p_n$)` of types $T_1 , \ldots , Tlast$;
+  if $T_n$ denotes a repeated parameter (it has shape $T*$), and so does $m'$'s last parameter,
+  $Tlast$ is taken as $T$, otherwise is $T_n$ used directly.
 - A polymorphic method of type `[$a_1$ >: $L_1$ <: $U_1 , \ldots , a_n$ >: $L_n$ <: $U_n$]$T$` is
   as specific as some other member of type $S$ if $T$ is as specific as $S$
   under the assumption that for $i = 1 , \ldots , n$ each $a_i$ is an abstract type name
diff --git a/src/compiler/scala/tools/nsc/typechecker/Infer.scala b/src/compiler/scala/tools/nsc/typechecker/Infer.scala
index 9ff0ac36fd30..003ae412d280 100644
--- a/src/compiler/scala/tools/nsc/typechecker/Infer.scala
+++ b/src/compiler/scala/tools/nsc/typechecker/Infer.scala
@@ -326,15 +326,23 @@ trait Infer extends Checkable {
         (samFun ne NoType) && isCompatible(tp, samFun)
       }
 
-      val tp1 = methodToExpressionTp(tp)
+      // can only compare if both types are repeated or neither is (T* is not actually a first-class type, even though it has a BTS and thus participates in subtyping)
+      (!isRepeatedParamType(tp) || isRepeatedParamType(pt)) && {
+        val tp1 = methodToExpressionTp(tp)
+
+        ((tp1 weak_<:< pt)
+         || isCoercible(tp1, pt)
+         || isCompatibleByName(tp, pt)
+         || isCompatibleSam(tp, pt)
+        )
+      }
+    }
 
-      (    (tp1 weak_<:< pt)
-        || isCoercible(tp1, pt)
-        || isCompatibleByName(tp, pt)
-        || isCompatibleSam(tp, pt)
-      )
+    def isCompatibleArgs(tps: List[Type], pts: List[Type]) = {
+      val res = (tps corresponds pts)(isCompatible)
+//      println(s"isCompatibleArgs $res : $tps <:< $pts")
+      res
     }
-    def isCompatibleArgs(tps: List[Type], pts: List[Type]) = (tps corresponds pts)(isCompatible)
 
     def isWeaklyCompatible(tp: Type, pt: Type): Boolean = {
       def isCompatibleNoParamsMethod = tp match {
@@ -689,28 +697,33 @@ trait Infer extends Checkable {
     /** The type of an argument list after being coerced to a tuple.
      *  @pre: the argument list is eligible for tuple conversion.
      */
-    private def typeAfterTupleConversion(argtpes: List[Type]): Type = (
+    private def typeAfterTupleConversion(argtpes: List[Type]): Type =
       if (argtpes.isEmpty) UnitTpe                 // aka "Tuple0"
       else tupleType(argtpes map {
         case NamedType(name, tp) => UnitTpe  // not a named arg - only assignments here
         case RepeatedType(tp)    => tp       // but probably shouldn't be tupling a call containing :_*
         case tp                  => tp
       })
-    )
 
     /** If the argument list needs to be tupled for the parameter list,
-     *  a list containing the type of the tuple.  Otherwise, the original
-     *  argument list.
-     */
+      * a list containing the type of the tuple.  Otherwise, the original
+      * argument list.
+      *
+      * NOTE: we have to exclude repeated parameter types for overloading resolution like this:
+      *   def f[T](x: T): T = x
+      *   def f[T](x: T, xs: T*): T = x
+      *
+      * In the process of deciding which ones is more specific, isApplicableToMethod would otherwise try T' = (T, T*)
+      */
     def tupleIfNecessary(formals: List[Type], argtpes: List[Type]): List[Type] = {
-      if (eligibleForTupleConversion(formals, argtpes.size))
+      if (!argtpes.exists(isRepeatedParamType) && eligibleForTupleConversion(formals, argtpes.size))
         typeAfterTupleConversion(argtpes) :: Nil
       else
         argtpes
     }
 
     // This is primarily a duplicte of enhanceBounds in typedAppliedTypeTree
-    // modified to use updateInfo rather than setInfo to avoid wiping out 
+    // modified to use updateInfo rather than setInfo to avoid wiping out
     // type history.
     def enhanceBounds(okparams: List[Symbol], okargs: List[Type], undets: List[Symbol]): Unit =
       undets.foreach { undet =>
@@ -755,12 +768,14 @@ trait Infer extends Checkable {
         case (_, pos, _) if !allArgsArePositional(pos) && !sameLength(formals, mt.params) => false // different length lists and all args not positional
         case (args, pos, _)                                                               => typesCompatible(reorderArgs(args, pos))
       }
-      compareLengths(argtpes0, formals) match {
+      val res = compareLengths(argtpes0, formals) match {
         case 0 if containsNamedType(argtpes0) => reorderedTypesCompatible      // right number of args, wrong order
         case 0                                => typesCompatible(argtpes0)     // fast track if no named arguments are used
         case x if x > 0                       => tryWithArgs(argsTupled)       // too many args, try tupling
         case _                                => tryWithArgs(argsPlusDefaults) // too few args, try adding defaults or tupling
       }
+      // println(s"isApplicableToMethod $res : $mt --> $formals to $argtpes0 for $pt under $undetparams")
+      res
     }
 
     /** Is there an instantiation of free type variables `undetparams` such that
@@ -772,17 +787,20 @@ trait Infer extends Checkable {
      *    type is set to `Unit`, i.e. the corresponding argument is treated as
      *    an assignment expression (@see checkNames).
      */
-    private def isApplicable(undetparams: List[Symbol], ftpe: Type, argtpes0: List[Type], pt: Type): Boolean = (
-      ftpe match {
-        case OverloadedType(pre, alts) => alts exists (alt => isApplicable(undetparams, pre memberType alt, argtpes0, pt))
-        case ExistentialType(_, qtpe)  => isApplicable(undetparams, qtpe, argtpes0, pt)
-        case mt @ MethodType(_, _)     => isApplicableToMethod(undetparams, mt, argtpes0, pt)
-        case NullaryMethodType(restpe) => isApplicable(undetparams, restpe, argtpes0, pt)
-        case PolyType(tparams, restpe) => createFromClonedSymbols(tparams, restpe)((tps1, res1) => isApplicable(tps1 ::: undetparams, res1, argtpes0, pt))
-        case ErrorType                 => true
-        case _                         => false
-      }
-    )
+    private def isApplicable(undetparams: List[Symbol], ftpe: Type, argtpes0: List[Type], pt: Type): Boolean = {
+      val res =
+        ftpe match {
+          case OverloadedType(pre, alts) => alts exists (alt => isApplicable(undetparams, pre memberType alt, argtpes0, pt))
+          case ExistentialType(_, qtpe)  => isApplicable(undetparams, qtpe, argtpes0, pt)
+          case mt@MethodType(_, _)       => isApplicableToMethod(undetparams, mt, argtpes0, pt)
+          case NullaryMethodType(restpe) => isApplicable(undetparams, restpe, argtpes0, pt)
+          case PolyType(tparams, restpe) => createFromClonedSymbols(tparams, restpe)((tps1, res1) => isApplicable(tps1 ::: undetparams, res1, argtpes0, pt))
+          case ErrorType                 => true
+          case _                         => false
+        }
+//      println(s"isApplicable $res : $ftpe to $argtpes0 for $pt under $undetparams")
+      res
+    }
 
     /**
      * Are arguments of the given types applicable to `ftpe`? Type argument inference
@@ -807,30 +825,38 @@ trait Infer extends Checkable {
      *  @see SLS (sec:overloading-resolution)
      */
     def isAsSpecific(ftpe1: Type, ftpe2: Type): Boolean = {
-      def checkIsApplicable(argtpes: List[Type]) = isApplicable(Nil, ftpe2, argtpes, WildcardType)
-      def bothAreVarargs                         = isVarArgsList(ftpe1.params) && isVarArgsList(ftpe2.params)
-      def onRight = ftpe2 match {
-        case OverloadedType(pre, alts)                     => alts forall (alt => isAsSpecific(ftpe1, pre memberType alt))
-        case et: ExistentialType                           => et.withTypeVars(isAsSpecific(ftpe1, _))
-        case mt @ MethodType(_, restpe)                    => !mt.isImplicit || isAsSpecific(ftpe1, restpe)
-        case NullaryMethodType(res)                        => isAsSpecific(ftpe1, res)
-        case PolyType(tparams, NullaryMethodType(restpe))  => isAsSpecific(ftpe1, PolyType(tparams, restpe))
-        case PolyType(tparams, mt @ MethodType(_, restpe)) => !mt.isImplicit || isAsSpecific(ftpe1, PolyType(tparams, restpe))
-        case _                                             => isAsSpecificValueType(ftpe1, ftpe2, Nil, Nil)
+      def checkIsApplicable(mt: MethodType) = {
+        val paramTypes = mt.paramTypes
+        val aligned =
+          if (isRepeatedParamType(paramTypes.last) && isVarArgsList(ftpe2.params)) paramTypes.init :+ repeatedToSingle(paramTypes.last)
+          else paramTypes
+        isApplicable(Nil, ftpe2, aligned, WildcardType)
       }
+
+      val res =
       ftpe1 match {
         case OverloadedType(pre, alts)                                      => alts exists (alt => isAsSpecific(pre memberType alt, ftpe2))
         case et: ExistentialType                                            => isAsSpecific(et.skolemizeExistential, ftpe2)
         case NullaryMethodType(restpe)                                      => isAsSpecific(restpe, ftpe2)
         case mt @ MethodType(_, restpe) if mt.isImplicit                    => isAsSpecific(restpe, ftpe2)
-        case mt @ MethodType(_, _) if bothAreVarargs                        => checkIsApplicable(mt.paramTypes mapConserve repeatedToSingle)
-        case mt @ MethodType(params, _) if params.nonEmpty                  => checkIsApplicable(mt.paramTypes)
+        case mt @ MethodType(params, _) if params.nonEmpty                  => checkIsApplicable(mt)
         case PolyType(tparams, NullaryMethodType(restpe))                   => isAsSpecific(PolyType(tparams, restpe), ftpe2)
         case PolyType(tparams, mt @ MethodType(_, restpe)) if mt.isImplicit => isAsSpecific(PolyType(tparams, restpe), ftpe2)
-        case PolyType(_, mt @ MethodType(params, _)) if params.nonEmpty     => checkIsApplicable(mt.paramTypes)
+        case PolyType(_, mt @ MethodType(params, _)) if params.nonEmpty     => checkIsApplicable(mt)
         case ErrorType                                                      => true
-        case _                                                              => onRight
+        case _                                                              =>
+          ftpe2 match {
+            case OverloadedType(pre, alts)                     => alts forall (alt => isAsSpecific(ftpe1, pre memberType alt))
+            case et: ExistentialType                           => et.withTypeVars(isAsSpecific(ftpe1, _))
+            case mt @ MethodType(_, restpe)                    => !mt.isImplicit || isAsSpecific(ftpe1, restpe)
+            case NullaryMethodType(res)                        => isAsSpecific(ftpe1, res)
+            case PolyType(tparams, NullaryMethodType(restpe))  => isAsSpecific(ftpe1, PolyType(tparams, restpe))
+            case PolyType(tparams, mt @ MethodType(_, restpe)) => !mt.isImplicit || isAsSpecific(ftpe1, PolyType(tparams, restpe))
+            case _                                             => isAsSpecificValueType(ftpe1, ftpe2, Nil, Nil)
+          }
       }
+      // println(s"isAsSpecific $res $ftpe1 - $ftpe2")
+      res
     }
 
     private def isAsSpecificValueType(tpe1: Type, tpe2: Type, undef1: List[Symbol], undef2: List[Symbol]): Boolean = tpe1 match {
@@ -1413,6 +1439,7 @@ trait Infer extends Checkable {
         private def rankAlternatives(sym1: Symbol, sym2: Symbol) = isStrictlyMoreSpecific(followType(sym1), followType(sym2), sym1, sym2)
         private def bestForExpectedType(pt: Type, isLastTry: Boolean): Unit = {
           val applicable  = overloadsToConsiderBySpecificity(alts filter isAltApplicable(pt), argtpes, varargsStar)
+          // println(s"bestForExpectedType($argtpes, $pt): $alts -app-> ${alts filter isAltApplicable(pt)} -arity-> $applicable")
           val ranked      = bestAlternatives(applicable)(rankAlternatives)
           ranked match {
             case best :: competing :: _ => AmbiguousMethodAlternativeError(tree, pre, best, competing, argtpes, pt, isLastTry) // ambiguous
diff --git a/src/compiler/scala/tools/nsc/typechecker/Typers.scala b/src/compiler/scala/tools/nsc/typechecker/Typers.scala
index 1819db0012d8..8986f5b12086 100644
--- a/src/compiler/scala/tools/nsc/typechecker/Typers.scala
+++ b/src/compiler/scala/tools/nsc/typechecker/Typers.scala
@@ -1147,6 +1147,8 @@ trait Typers extends Adaptations with Tags with TypersTracking with PatternTyper
           assert(!context.inTypeConstructorAllowed, context) //@M
           instantiatePossiblyExpectingUnit(tree, mode, pt)
         }
+        // TODO: we really shouldn't use T* as a first class types (e.g. for repeated case fields), but we can't allow T* to conform to other types (see isCompatible) because that breaks overload resolution
+        else if (isScalaRepeatedParamType(tree.tpe) && !isScalaRepeatedParamType(pt)) adapt(tree setType(repeatedToSeq(tree.tpe)), mode, pt)
         else if (tree.tpe <:< pt)
           tree
         else if (mode.inPatternMode && { inferModulePattern(tree, pt); isPopulated(tree.tpe, approximateAbstracts(pt)) })
diff --git a/src/compiler/scala/tools/nsc/typechecker/Unapplies.scala b/src/compiler/scala/tools/nsc/typechecker/Unapplies.scala
index e4862d6872f6..675ef108c1ba 100644
--- a/src/compiler/scala/tools/nsc/typechecker/Unapplies.scala
+++ b/src/compiler/scala/tools/nsc/typechecker/Unapplies.scala
@@ -73,33 +73,6 @@ trait Unapplies extends ast.TreeDSL {
     tparamsInvariant
   }
 
-  /** The return value of an unapply method of a case class C[Ts]
-   *  @param param  The name of the parameter of the unapply method, assumed to be of type C[Ts]
-   *  @param caseclazz  The case class C[Ts]
-   */
-  private def caseClassUnapplyReturnValue(param: Name, caseclazz: ClassDef) = {
-    def caseFieldAccessorValue(selector: ValDef): Tree = {
-      // Selecting by name seems to be the most straight forward way here to
-      // avoid forcing the symbol of the case class in order to list the accessors.
-      def selectByName = Ident(param) DOT caseAccessorName(caseclazz.symbol, selector.name)
-      // But, that gives a misleading error message in neg/t1422.scala, where a case
-      // class has an illegal private[this] parameter. We can detect this by checking
-      // the modifiers on the param accessors.
-      // We just generate a call to that param accessor here, which gives us an inaccessible
-      // symbol error, as before.
-      def localAccessor = caseclazz.impl.body find {
-        case t @ ValOrDefDef(mods, selector.name, _, _) => mods.isPrivateLocal
-        case _                                          => false
-      }
-      localAccessor.fold(selectByName)(Ident(param) DOT _.symbol)
-    }
-
-    // Working with trees, rather than symbols, to avoid cycles like scala/bug#5082
-    constrParamss(caseclazz).take(1).flatten match {
-      case Nil => TRUE
-      case xs  => SOME(xs map caseFieldAccessorValue: _*)
-    }
-  }
 
   /** The module corresponding to a case class; overrides toString to show the module's name
    */
@@ -153,31 +126,61 @@ trait Unapplies extends ast.TreeDSL {
   /** The unapply method corresponding to a case class
    */
   def caseModuleUnapplyMeth(cdef: ClassDef): DefDef = {
-    val tparams    = constrTparamsInvariant(cdef)
-    val method     = constrParamss(cdef) match {
+    val tparams = constrTparamsInvariant(cdef)
+    val method = constrParamss(cdef) match {
       case xs :: _ if xs.nonEmpty && isRepeatedParamType(xs.last.tpt) => nme.unapplySeq
       case _                                                          => nme.unapply
     }
-    val cparams    = List(ValDef(Modifiers(PARAM | SYNTHETIC), unapplyParamName, classType(cdef, tparams), EmptyTree))
+    val cparams = List(ValDef(Modifiers(PARAM | SYNTHETIC), unapplyParamName, classType(cdef, tparams), EmptyTree))
     val resultType = if (!settings.isScala212) TypeTree() else { // fix for scala/bug#6541 under -Xsource:2.12
-    def repeatedToSeq(tp: Tree) = tp match {
+      def repeatedToSeq(tp: Tree) = tp match {
         case AppliedTypeTree(Select(_, tpnme.REPEATED_PARAM_CLASS_NAME), tps) => AppliedTypeTree(gen.rootScalaDot(tpnme.Seq), tps)
         case _                                                                => tp
       }
+
       constrParamss(cdef) match {
         case Nil | Nil :: _ =>
           gen.rootScalaDot(tpnme.Boolean)
-        case params :: _ =>
+        case params :: _    =>
           val constrParamTypes = params.map(param => repeatedToSeq(param.tpt))
           AppliedTypeTree(gen.rootScalaDot(tpnme.Option), List(treeBuilder.makeTupleType(constrParamTypes)))
       }
     }
-    val ifNull     = if (constrParamss(cdef).head.isEmpty) FALSE else REF(NoneModule)
-    val body       = nullSafe({ case Ident(x) => caseClassUnapplyReturnValue(x, cdef) }, ifNull)(Ident(unapplyParamName))
 
-    atPos(cdef.pos.focus)(
-      DefDef(caseMods, method, tparams, List(cparams), resultType, body)
-    )
+    def selectCaseFieldAccessor(constrParam: ValDef): Tree = {
+      val unapplyParam = Ident(unapplyParamName)
+
+      // Selecting by name seems to be the most straight forward way here to
+      // avoid forcing the symbol of the case class in order to list the accessors.
+      //
+      // But, that gives a misleading error message in neg/t1422.scala, where a case
+      // class has an illegal private[this] parameter. We can detect this by checking
+      // the modifiers on the param accessors.
+      // We just generate a call to that param accessor here, which gives us an inaccessible
+      // symbol error, as before.
+      val accSel =
+        cdef.impl.body collectFirst {
+          case localAccessor@ValOrDefDef(mods, constrParam.name, _, _) if mods.isPrivateLocal => Select(unapplyParam, localAccessor.symbol)
+        } getOrElse Select(unapplyParam, caseAccessorName(cdef.symbol, constrParam.name))
+
+      constrParam.tpt match {
+        case AppliedTypeTree(Select(_, tpnme.REPEATED_PARAM_CLASS_NAME), tps) => Typed(accSel, AppliedTypeTree(gen.rootScalaDot(tpnme.Seq), tps))
+        case _                                                                => accSel
+      }
+    }
+
+    val body =
+      If(Ident(unapplyParamName) OBJ_EQ NULL,
+          if (constrParamss(cdef).head.isEmpty) FALSE else REF(NoneModule),
+          // Working with trees, rather than symbols, to avoid cycles like scala/bug#5082
+          constrParamss(cdef).take(1).flatten match {
+            case Nil => TRUE
+            case xs  => SOME(xs map selectCaseFieldAccessor: _*)
+          }
+        )
+
+
+    atPos(cdef.pos.focus)(DefDef(caseMods, method, tparams, List(cparams), resultType, body))
   }
 
   /**
diff --git a/src/reflect/scala/reflect/internal/Definitions.scala b/src/reflect/scala/reflect/internal/Definitions.scala
index 3db9544d774b..4e96733eccac 100644
--- a/src/reflect/scala/reflect/internal/Definitions.scala
+++ b/src/reflect/scala/reflect/internal/Definitions.scala
@@ -1424,6 +1424,11 @@ trait Definitions extends api.StandardDefinitions {
     private def newAlias(owner: Symbol, name: TypeName, alias: Type): AliasTypeSymbol =
       owner.newAliasType(name) setInfoAndEnter alias
 
+    // TODO: this is an unfortunate trade-off: on the one hand, `T*` is not a first-class type, and it shouldn't be compatible with T.
+    // This matters for overloading resolution, where a vararg method should be seen as less specific than a non-vararg one,
+    // since you can pass a T to a method that expects a T*, but you can't pass a T* to a method that takes a T
+    // (except if you allow converting T* to Seq[T], which should not be done through subtyping but instead using a conversion, IMO.)
+    // On the other hand, inside a method body, an argument of type T* can be treated as a Seq[T].
     private def specialPolyClass(name: TypeName, flags: Long)(parentFn: Symbol => Type): ClassSymbol = {
       val clazz   = enterNewClass(ScalaPackageClass, name, Nil)
       val tparam  = clazz.newSyntheticTypeParam("T0", flags)
diff --git a/test/files/neg/t8344.check b/test/files/neg/t8344.check
new file mode 100644
index 000000000000..bdc252f0e2fc
--- /dev/null
+++ b/test/files/neg/t8344.check
@@ -0,0 +1,7 @@
+t8344.scala:7: error: ambiguous reference to overloaded definition,
+both method f in object t of type (x: String*)Int
+and  method f in object t of type (x: Object)Int
+match argument types (String)
+  t.f("")
+    ^
+one error found
diff --git a/test/files/neg/t8344.scala b/test/files/neg/t8344.scala
new file mode 100644
index 000000000000..467e678899d0
--- /dev/null
+++ b/test/files/neg/t8344.scala
@@ -0,0 +1,8 @@
+object t {
+  def f(x: Object) = 1
+  def f(x: String*) = 2
+}
+
+class Test {
+  t.f("")
+}
diff --git a/test/files/pos/overload_poly_repeated.scala b/test/files/pos/overload_poly_repeated.scala
new file mode 100644
index 000000000000..6ca097f71767
--- /dev/null
+++ b/test/files/pos/overload_poly_repeated.scala
@@ -0,0 +1,54 @@
+class C {
+  // this always worked
+  // during isApplicableToMethod will use formalTypes to eliminate the repeated param in the formal types,
+  // but we keep the repeated marker in the arguments -- here's a debug log:
+/*
+isCompatibleArgs false (List(Int*), List(Int))
+isAsSpecific false: (xs: Int*)Int >> (x: Int)Int?
+ --> the repeated case is not more specific than the single-arg case because
+     you can't apply something of `Int*` to `Int`
+
+isCompatibleArgs true (List(Int), List(Int))
+isAsSpecific true: (x: Int)Int >> (xs: Int*)Int?
+  --> the single param case is more specific than the repeated param case, because
+      you can apply a single argument to the method with the repeated param
+
+isCompatibleArgs true (List(Int), List(Int))
+isAsSpecific true: (x: Int)Int >> (xs: Int*)Int?
+isCompatibleArgs false (List(Int*), List(Int))
+isAsSpecific false: (xs: Int*)Int >> (x: Int)Int?
+isCompatibleArgs true (List(Int), List(Int))
+isAsSpecific true: (x: Int)Int >> (xs: Int*)Int?
+isCompatibleArgs false (List(Int*), List(Int))
+isAsSpecific false: (xs: Int*)Int >> (x: Int)Int?
+inferMethodAlternative applicable List(method foo, method foo) --> ranked: List(method foo)
+
+ */
+
+  def foo(xs: Int*): Int = xs.toSeq.head
+  def foo(x: Int): Int = x
+  foo(2)
+
+  // this should also type check, resolving to the non-repeated case,
+  // but there was a bug in the polymorphic case of isApplicableToMethod
+  // (adjustTypeArgs would remove the incompatibility in applying something
+  //  expecting type T to a T*, as the latter would be turned into Seq[T])
+/*
+isAsSpecific false: [T](xs: T*)T >> [T](x: T)T?
+isAsSpecific true: [T](x: T)T >> [T](xs: T*)T?
+isAsSpecific true: [T](x: T)T >> [T](xs: T*)T?
+isAsSpecific false: [T](xs: T*)T >> [T](x: T)T?
+isAsSpecific true: [T](x: T)T >> [T](xs: T*)T?
+isAsSpecific false: [T](xs: T*)T >> [T](x: T)T?
+inferMethodAlternative applicable List(method fooT, method fooT) --> ranked: List(method fooT)
+ */
+  def fooT[T](xs: T*): T = xs.toSeq.head
+  def fooT[T](x: T): T = x
+  fooT(2)
+
+  // from 4775
+  def f[T](x: T): T = x
+  def f[T](x: T, xs: T*): T = x
+
+  f(5)
+}
diff --git a/test/files/pos/t3866.scala b/test/files/pos/t3866.scala
index 243b0e435924..f1f64edb9597 100644
--- a/test/files/pos/t3866.scala
+++ b/test/files/pos/t3866.scala
@@ -14,4 +14,4 @@ abstract class ImplicitRepeated {
   f( 1, 2 )    // should be implicitly resolved to alternative a)
     // ImplicitRepeated.this.f[Int, Nothing]("A", ImplicitRepeated.this.anyToN[Int](1), ImplicitRepeated.this.anyToN[Int](2));
     // ImplicitRepeated.this.f[Int, Nothing](ImplicitRepeated.this.anyToN[Int](1), ImplicitRepeated.this.anyToN[Int](2))
-}
\ No newline at end of file
+}
diff --git a/test/files/pos/t4775/JavaClass.java b/test/files/pos/t4775/JavaClass.java
new file mode 100644
index 000000000000..bef2a1ccb170
--- /dev/null
+++ b/test/files/pos/t4775/JavaClass.java
@@ -0,0 +1,25 @@
+public class JavaClass {
+    public static class Element {
+
+    }
+
+    public static <T extends Element> int foo(Element a, Class<T> b, boolean c, Class<? extends T>... d) {
+        return 1;
+    }
+
+    public static <T extends Element> int foo(Element a, Class<? extends T> b, boolean c) {
+        return 2;
+    }
+
+    public static <T extends Element> int foo(Element a, Class<? extends T>... b) {
+        return 3;
+    }
+
+    public static <T extends Element> int foo(Element a, boolean b, Class<? extends T>... c) {
+        return 4;
+    }
+
+    static {
+        foo(new Element(), Element.class, false);
+    }
+}
diff --git a/test/files/pos/t4775/Test.scala b/test/files/pos/t4775/Test.scala
new file mode 100644
index 000000000000..970c3544e13d
--- /dev/null
+++ b/test/files/pos/t4775/Test.scala
@@ -0,0 +1,4 @@
+class Test {
+  import JavaClass._
+  foo(new Element, classOf[Element], false)
+}
diff --git a/test/files/run/idempotency-case-classes.check b/test/files/run/idempotency-case-classes.check
index ed4308aba20b..6607f406f87c 100644
--- a/test/files/run/idempotency-case-classes.check
+++ b/test/files/run/idempotency-case-classes.check
@@ -49,7 +49,7 @@ C(2,3)
     };
     final override <synthetic> def toString(): String = "C";
     case <synthetic> def apply(x: Int, y: Int): C = new C(x, y);
-    case <synthetic> def unapply(x$0: C): Option[(Int, Int)] = if (x$0.==(null))
+    case <synthetic> def unapply(x$0: C): Option[(Int, Int)] = if (x$0.eq(null))
       scala.None
     else
       Some.apply[(Int, Int)](scala.Tuple2.apply[Int, Int](x$0.x, x$0.y))
diff --git a/test/files/run/macroPlugins-namerHooks.check b/test/files/run/macroPlugins-namerHooks.check
index 63cda19ff6b8..f0af5ce5eb7b 100644
--- a/test/files/run/macroPlugins-namerHooks.check
+++ b/test/files/run/macroPlugins-namerHooks.check
@@ -28,7 +28,7 @@ enterStat(<synthetic> val C$1: C = x$1.asInstanceOf[C])
 enterSym(def <init>() = {   super.<init>();   () })
 enterSym(final override <synthetic> def toString() = "C")
 enterSym(case <synthetic> def apply(x: Int, y: Int): C = new C(x, y))
-enterSym(case <synthetic> def unapply(x$0: C): _root_.scala.Option[scala.Tuple2[Int, Int]] = if (x$0.==(null))   scala.None else   Some(scala.Tuple2(x$0.x, x$0.y)))
+enterSym(case <synthetic> def unapply(x$0: C): _root_.scala.Option[scala.Tuple2[Int, Int]] = if (x$0.eq(null))   scala.None else   Some(scala.Tuple2(x$0.x, x$0.y)))
 enterStat(def <init>() = {   super.<init>();   () })
 enterStat(final override <synthetic> def toString() = "C")
 enterSym(def <init>() = {   super.<init>();   () })
