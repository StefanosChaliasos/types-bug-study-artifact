diff --git a/src/reflect/scala/reflect/internal/Types.scala b/src/reflect/scala/reflect/internal/Types.scala
index 8972dfa8289f..d4f36e3c6d2c 100644
--- a/src/reflect/scala/reflect/internal/Types.scala
+++ b/src/reflect/scala/reflect/internal/Types.scala
@@ -2201,7 +2201,15 @@ trait Types extends api.Types { self: SymbolTable =>
     override protected def normalizeImpl =
       if (typeParamsMatchArgs) betaReduce.normalize
       else if (isHigherKinded) super.normalizeImpl
-      else ErrorType
+      else {
+        // if we are overriding a type alias in an erroneous way, don't just
+        // return an ErrorType since that will result in useless error msg.
+        // Instead let's try to recover from it and rely on refcheck reporting the correct error,
+        // if that fails fallback to the old behaviour.
+        val overriddenSym = sym.nextOverriddenSymbol
+        if (overriddenSym != NoSymbol) pre.memberType(overriddenSym).normalize
+        else ErrorType
+      }
 
     // isHKSubType0 introduces synthetic type params so that
     // betaReduce can first apply sym.info to typeArgs before calling
diff --git a/test/files/neg/t5687.check b/test/files/neg/t5687.check
new file mode 100644
index 000000000000..5096077ee5d8
--- /dev/null
+++ b/test/files/neg/t5687.check
@@ -0,0 +1,8 @@
+t5687.scala:4: error: type arguments [T] do not conform to class Template's type parameter bounds [T <: AnyRef]
+  type Repr[T]<:Template[T]
+                ^
+t5687.scala:20: error: overriding type Repr in class Template with bounds[T] <: Template[T];
+ type Repr has incompatible type
+  type Repr = CurveTemplate[T]
+       ^
+two errors found
diff --git a/test/files/neg/t5687.scala b/test/files/neg/t5687.scala
new file mode 100644
index 000000000000..90a9ae265cfb
--- /dev/null
+++ b/test/files/neg/t5687.scala
@@ -0,0 +1,55 @@
+abstract class Template[T <: AnyRef](private val t: T) {
+
+//  type Repr[A<:AnyRef]<:Template[T]
+  type Repr[T]<:Template[T]
+
+  def access1(timeout: Int): Repr[T] = this.asInstanceOf[Repr[T]]
+  def access2: Repr[T] = this.asInstanceOf[Repr[T]]
+  val access3: Repr[T] = this.asInstanceOf[Repr[T]]
+  def access4(v: Repr[T]): Repr[T] = this.asInstanceOf[Repr[T]]
+  def access5(x: X): Repr[T] = this.asInstanceOf[Repr[T]]
+  def access5(x: Y): Repr[T] = this.asInstanceOf[Repr[T]]
+
+  def withReadModifiers(readModifiers:Int): Repr[T] = this.asInstanceOf[Repr[T]]
+}
+
+class Curve
+
+class CurveTemplate [T <: Curve](t: T) extends Template(t) {
+//  type Repr[A<: AnyRef] = CurveTemplate[T]
+  type Repr = CurveTemplate[T]
+}
+
+class Base
+class X extends Base
+class Y extends Base
+
+
+object Example {
+ def test1() {
+   new CurveTemplate(new Curve).access1(10)
+
+   new CurveTemplate(new Curve).access2
+
+   new CurveTemplate(new Curve).access3
+
+   new CurveTemplate(new Curve).access4(null)
+
+   new CurveTemplate(new Curve).access5(new X)
+
+   ()
+
+ }
+
+ def test2() {
+   new CurveTemplate(new Curve).access1(10).withReadModifiers(1)
+
+   new CurveTemplate(new Curve).access2.withReadModifiers(1)
+
+   new CurveTemplate(new Curve).access3.withReadModifiers(1)
+
+   new CurveTemplate(new Curve).access4(null).withReadModifiers(1)
+
+   new CurveTemplate(new Curve).access5(new X).withReadModifiers(1)
+ }
+}
