diff --git a/src/reflect/scala/reflect/internal/Types.scala b/src/reflect/scala/reflect/internal/Types.scala
index b282026c368b..5b23bbf144bc 100644
--- a/src/reflect/scala/reflect/internal/Types.scala
+++ b/src/reflect/scala/reflect/internal/Types.scala
@@ -3940,7 +3940,8 @@ trait Types
     def maybeCreateDummyClone(pre: Type, sym: Symbol): Type = pre match {
       case SingleType(pre1, sym1) =>
         if (sym1.isModule && sym1.isStatic) {
-          NoType
+          if (sym.owner == sym1 || sym.isJavaDefined || sym.owner.sourceModule.isStaticModule) NoType
+          else pre
         } else if (sym1.isModule && sym.owner == sym1.moduleClass) {
           val pre2 = maybeCreateDummyClone(pre1, sym1)
           if (pre2 eq NoType) pre2
diff --git a/test/files/run/t9110.scala b/test/files/run/t9110.scala
new file mode 100644
index 000000000000..660291a4d139
--- /dev/null
+++ b/test/files/run/t9110.scala
@@ -0,0 +1,27 @@
+trait Event
+
+trait Domain {
+  case class Created(name: String) extends Event
+}
+
+// declare three instances of Domain trait, one here and two
+// in an inner scope
+
+object DomainC extends Domain
+
+object Test {
+ def main(args: Array[String]) {
+   object DomainA extends Domain
+   object DomainB extends Domain
+
+   def lookingForAs(event: Event): Unit = {
+      event match {
+        case DomainB.Created(_) => throw null
+        case DomainC.Created(_) => throw null
+        case DomainA.Created(_) => // okay
+      }
+   }
+
+   lookingForAs(DomainA.Created("I am an A"))
+  }
+}
